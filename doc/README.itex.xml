<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook MathML Module V1.0//EN"
                    "file:/usr/share/xml/docbook/custom/mathml/1.0/dbmathml.dtd">

<!-- !DOCTYPE article PUBLIC "-//OASIS//DTD DocBook MathML Module V1.0//EN"
                    "http://www.oasis-open.org/docbook/xml/mathml/1.0/dbmathml.dtd" -->
<!-- DOCTYPE article PUBLIC "-//OASIS//DTD DocBook MathML Module V1.0//EN"
  "http://www.docbook.org/xml/mathml/1.0/dbmathml.dtd" -->
<!-- DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
     "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [] -->
<article lang="en">
  <articleinfo>
    <title><application>BAli-Phy</application> User's Guide v1.9.9</title>
    <author>
      <firstname>Benjamin</firstname>
      <surname>Redelings</surname>
    </author>
  </articleinfo>

  <sect1>
    <title>Pre-requisites</title>

      <sect2>
	<title>Hardware Requirements</title>

	<para><application>BAli-Phy</application> should be able to
	run on any hardware with a modern operating system, including
	Linux or UNIX, Windows, and Mac OS X.</para>

	<para>We recommend at least 512Mb of RAM and a 1.5GHz
	processor.  We typically run
	<application>BAli-Phy</application> on Pentium 4 processors
	with 1Gb of RAM and a 3 GHz processor.</para> 
      </sect2>

      <sect2>
	<title>Operating System requirements</title>

	  <note>
	    <title>Command line ahead!</title>
	    
	    <para><application>BAli-Phy</application> is not a
	    graphical application.  While there are Mac and Windows
	    version available, these assume that you understand some
	    UNIX commands, or at least are not intimidated by them.
	    BAli-Phy is (hopefully) usable, but it is not "user-friendly"!
	    </para>
	  </note>

	<sect3>
	  <title>Linux and UNIX</title>

	  <para>A Linux or UNIX system should be able to install and
	  run <application>BAli-Phy</application> without any modification.</para>
	</sect3>

	<sect3>
	  <title>Windows</title>

	  <para>On Windows you must first install <ulink
	  url="http://www.cygwin.com">cygwin</ulink>.  Cygwin is a
	  Linux environment for Windows.  You can use the cygwin
	  installer to install other software packages that you
	  need (See <xref linkend="software_req"/>). You can access the
	  Cygwin command line (not the normal windows command line)
	  through the Start menu.</para> 
	</sect3>

	<sect3>
	  <title>Mac OS X</title>

	  <para>A Mac OS X system is based on UNIX, and should be able to
	  compile and run <application>BAli-Phy</application>.  The version
	  of OS X must be 10.1 or higher.  If you want to use the
	  development tools from Apple to compile
	  <application>BAli-Phy</application>, the system must be 10.4 or
	  higher, and you must upgrade to XCode 2.2 or higher (see Software
	  Requirements).
	  </para>

	  <para>You can use <ulink
	  url="http://fink.sourceforge.net">Fink</ulink> to install
	  other useful applications, such as gnuplot.
	  </para>
	</sect3>

      </sect2>

      <sect2>
	<title id="software_req">Software Requirements</title>

	<sect3>
	  <title>Compilation Requirements</title>

	<para>The following software packages are required for compiling BAli-Phy:

	<itemizedlist>
	  <listitem><para> A modern C++ compiler (<ulink
	  url="http://gcc.gnu.org">GCC</ulink> version 3.4, 4.0, and
	  4.1 are known to work)</para>

	  <note>
	    <title>Mac OS X issues:</title>
	    
	    <para>If you want to use the development tools shipped by Apple
	    (e.g. GCC) then you need OS X version 10.4 (Tiger) or higher, and
	    you need to install XCode 2.2 or higher.  (You can use a GCC compiler
	    built from the non-apple FSF sources, but installing XCode is
	    much simpler.) 
	    </para>

	<!-- para><ulink url="http://fink.sourceforge.net">Fink</ulink>
	provides Linux software for Mac OS X.  If you have Fink 0.8,
	you can use it to install both GSL and BOOST.  However, if you
	have 0.7 or lower, then you may use it to install the GSL
	library and include files, but the BOOST libraries from
	fink 0.7 <emphasis>will not work</emphasis>, because they are
	compiled with GCC 3.3. You must therefore compile the BOOST
	libraries yourself, using GCC 3.4 or higher.</para --> 
	</note></listitem>
	  <listitem><para>GNU make version 3.80 or higher  (<ulink
	  url="http://www.gnu.org/software/make">GNU make</ulink>).
	  </para></listitem>
	  <listitem><para> The GNU Scientific Library (<ulink url="http://sources.redhat.com/gsl/">GSL</ulink>) version 1.8 or higher.</para></listitem>
	  <!-- listitem><para> The BOOST C++ Library (<ulink
	  url="http://www.boost.org">BOOST</ulink>) version 1.32 or higher.</para></listitem -->
	</itemizedlist>
	</para>


	</sect3>

	<sect3>
	  <title>Requirements for analyzing <application>BAli-Phy</application> output</title>

	  <para>After you run <command>bali-phy</command> you will
	  need to run an analysis of the resulting files (See <xref
	  linkend="analysis"/>).  This analysis depends on the
	  following software packages: 

	  <itemizedlist>
	    <listitem><para>GNU make version 3.80 or higher  (<ulink
	    url="http://www.gnu.org/software/make">GNU make</ulink>).
	    </para></listitem>

	    <listitem><para>PERL</para></listitem>
	  </itemizedlist>

	  </para>
	</sect3>
	<sect3>
	  <title>Recommendations for analysis and documentation</title>

	  <para>In addition, the following software packages are
	  strongly recommended.  These packages allow you to view
	  plots and diagnostics for
	  <application>BAli-Phy</application>, or to view the
	  documentation correctly.

	  <itemizedlist>
	    <listitem><para><application>Tracer</application> - to
	    analyze MCMC diagnostics 
	    (<ulink
	    url="http://evolve.zoo.ox.ac.uk/software/tracer/">Tracer</ulink>) 
	    </para></listitem>

	    <listitem><para>The plotting program
	    <application>gnuplot</application> (<ulink
	    url="http://www.gnuplot.info/">gnuplot</ulink>)</para></listitem> 

	    <listitem><para>Mozilla or Mozilla/Firefox - to view the math in
	    the XHTML documentation. (<ulink url="http://www.mozilla.org/products/firefox/">Firefox</ulink>)</para></listitem>
	  </itemizedlist>
	  </para>
	</sect3>
	
      </sect2>
    </sect1>

    <sect1>
      <title>Compiling <application>BAli-Phy</application></title>

      <sect2>
	<title>Quick Start</title>
      <para>In order to compile the program on UNIX, first
      extract the source code archive, using a graphical archive
      manager, or the command-line tool <command>tar</command>:
      
      <screen><prompt>%</prompt> <userinput>tar -zxf bali-phy-1.9.9.tgz</userinput></screen>
      Then create a build directory, enter it, and run the
      configure command:

      <screen><prompt>%</prompt> <userinput>mkdir build</userinput>
<prompt>%</prompt> <userinput>cd build</userinput>
<prompt>%</prompt> <userinput>../bali-phy-1.9.9/configure</userinput></screen>
 
      If this command succeeds, then you can simply type

      <screen><prompt>%</prompt> <userinput>make</userinput>
<prompt>%</prompt> <userinput>make install</userinput></screen>

      to build and install <command>bali-phy</command> and its
      associated tools.  (This requires GNU <command>make</command>.)
      To customize the compilation and installation process, read the
      following sections on supplying arguments to the
      <command>configure</command> script.
      </para>
      </sect2>

      <sect2>
	<title>Installing to a location besides	<filename>/usr/local/</filename></title>
	<para>The configure script chooses to install
	<command>bali-phy</command> in the directory
	<filename>/usr/local/</filename> by default. We can install
	binaries to another directory <replaceable>dir</replaceable>
	by passing
	<userinput>--prefix=<replaceable>dir</replaceable></userinput>.
	For example, in order to install
	<application>BAli-Phy</application> under
	<filename>~/local</filename>, you can do:

<screen><prompt>%</prompt> <userinput>../bali-phy-1.9.9/configure --prefix=&#36;HOME/local</userinput></screen>
        This is recommended if you do not have permission to install
	to <filename>/usr/local/</filename>.
	</para>

      </sect2>

      <sect2>
	<title>Specifying where to find libraries and header files (e.g. GSL)</title>
	<para>You can instruct the compiler to look for include files
	in directory <replaceable>dir</replaceable> by passing
	<userinput>--with-extra-includes=<replaceable>dir</replaceable></userinput> to the <command>configure</command> script.
	</para>

	<para>You can instruct the compiler to look for libraries
	files in directory
	<filename><replaceable>dir</replaceable></filename> by
	passing
	<userinput>--with-extra-libs=<replaceable>dir</replaceable></userinput> to the <command>configure</command> script.  
	</para> 
      </sect2>

      <sect2>
	<title>Selecting a non-default C++ compiler</title>
	
	<para>The default C++ compiler is <command>g++</command>.  On
	some systems, <command>g++</command> invokes GCC version 3.3,
	and the correct compiler is called something else, such as
	<command>g++-4.0</command>.  To use
	<command>g++-4.0</command> as the C++ compiler when compiling
	<application>BAli-Phy</application>, you would set the CXX
	environment variable as follows:
	    <screen><prompt>%</prompt> <userinput>../bali-phy-1.9.9/configure CXX=g++-4.0</userinput></screen>
	</para>
      </sect2>

      <sect2>
	<title>Optimizing for a specific architecture</title>
	<para>You can specify optimizing for a specific brand of CPU,
	by specifying the <userinput>CHIP</userinput> variable to
	<command>configure</command>, as follows:
	    <screen><prompt>%</prompt> <userinput>../bali-phy-1.9.9/configure CHIP=<replaceable>cpu</replaceable></userinput></screen>
	You can set CHIP to any of <userinput>pentium3</userinput>,
	<userinput>pentium4</userinput>,
	<userinput>nocona</userinput>, <userinput>G3</userinput>,
	<userinput>G4</userinput>, or <userinput>G5</userinput>.
	</para>
      </sect2>

      <sect2>
	<title>Statically linked executables</title>
	<para>Call <command>configure</command> with the flag
	<userinput>--enable-static</userinput> to build static
	executables.  Static executables will be able to run on other
	computers with the with the same type of CPU but slightly
	different versions of the operating system. 
	</para> 
      </sect2>
	    

      <sect2>
	<title>Examples</title>
	<para>
        All these options to <command>configure</command> can be
	combined, as follows:
<screen><prompt>%</prompt> <userinput>../bali-phy-1.9.9/configure --prefix=&#36;HOME/local --enable-static CXX=g++-4.1 CHIP=pentium4</userinput></screen>
        This example uses <command>g++-4.1</command> to build a
	pentium4-optimized version of <command>bali-phy</command> with
	static linkage.
	</para>
      </sect2>
  </sect1>

  <sect1>
    <title>Installation</title>
    <sect2>
      <title>Installing when compiling from source</title>
      <para>
      After compiling <application>BAli-Phy</application>, you can
      simply type <command>make install</command>.  This will copy the
      compiled binaries to the directory chosen when you ran
      <command>configure</command>. 
      </para>
    </sect2>

    <sect2>
      <title>Installing precompiled binaries</title>
      <para>To install pre-compiled binaries, simply extract the
      compressed archive in the directory of your choice.  If you have
      root access you might extract in
      <filename>/usr/local</filename>; if not, you might make a
      directory <filename>~/local</filename> in your home directory
      and extract there.
      </para>

      <para>You can extract the compressed archive on the command line
      using the <command>tar</command> command:
<screen><prompt>%</prompt> tar -zxf bali-phy-<replaceable>version</replaceable>.tgz</screen>
      </para>
    </sect2>      

    <sect2>
      <title>Setting the PATH</title>
    <para>
    If you installed <application>BAli-Phy</application> to the directory
    <replaceable>dir</replaceable>, then you should put
    <replaceable>dir</replaceable>/bin in your PATH.  This allows the
    computer to find the programs and run them.  For example, if you
    installed <application>BAli-Phy</application> to
    <filename>/usr/local</filename>, then you should add
    <filename>/usr/local/bin</filename> to your PATH so that you can
    simply type <command>bali-phy</command> instead of
    <command>/usr/local/bin/bali-phy</command>.
    </para>

    <para>
    Setting your default path is beyond the scope of this document,
    but an internet search should reveal how to do this.
    </para>
    </sect2>

  </sect1>

  <sect1>
    <title>Running the program</title>

    <sect2>
    <title>The simple way</title>
    <para>The simplest way to run <application>BAli-Phy</application> is
    to invoke the <command>bali-phy</command> executable directly:

<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file</replaceable> --data-dir <replaceable>prefix</replaceable>/share/bali-phy/Data/</userinput>
</screen>

    Here <replaceable>sequence-file</replaceable> is a FASTA or PHYLIP
    file containing the sequences you wish to analyze.  It should end
    in <userinput>.fasta</userinput> or <userinput>.phy</userinput> to
    indicate which format it is using.  Here
    <replaceable>prefix</replaceable> stands for the directory
    where you extracted the bali-phy archive.</para>

    <note>
      <para>If your FASTA file has blank lines, then
      <command>bali-phy</command> will quit reading the file when it
      sees them.  You must remove blank lines from your FASTA files,
      or you will see errors complaining that too few sequences have
      been provided.</para>
    </note>
    </sect2>

    <sect2 id="spec_data_dir">
      <title>Locating the Data/ directory</title>

      <para>
	<application>BAli-Phy</application> stores important
	information in a "Data" directory, and needs to know where to
	find this information.  This information includes
	the genetic code and the WAG rate matrix.  If you installed
	<application>BAli-Phy</application> in a directory called
	<replaceable>prefix</replaceable>, then the Data/ directory
	will be at
	<filename><replaceable>prefix</replaceable>/share/bali-phy/Data/</filename>.
      </para>

      <para>
	If you specify the location of the Data/ directory in a
	configuration file, then you do not need to specify it on the
	command line every time. Then, in the future you can just type:

        <screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file</replaceable></userinput></screen>

	If you don't specify where the data directory is, then
	<application>BAli-Phy</application> will look for it at
	<filename>./Data</filename>.
      </para>

      <sect3>
	<title>Put the location in the configuration file</title>
	<para>
	  Create a new file at <filename>~/.bali-phy</filename> and
	  add the following line:
<screen>data-dir = <replaceable>somewhere</replaceable>/Data</screen>
          Then <command>bali-phy</command> will read this file
	  every time and know where to find the Data directory.  This
	  is the recommended method.
	</para>
      </sect3>

      <sect3>
	<title>Making a link/shortcut to the Data directory</title>
	<para>Instead of specifying the location of the data
	directory, you can make a shortcut to the Data directory:

        <screen><prompt>%</prompt> <userinput>ln -s <replaceable>somewhere</replaceable>/Data</userinput></screen>

	The shortcut will then be at <filename>./Data</filename>.  Then
	<command>bali-phy</command> will find the data directory  
	at the default location <filename>Data/</filename>, but only
	if you run it in the same directory as the shortcut.
	</para>
      </sect3>

      <sect3>
	<title>Making your own copy of the Data directory</title>
	<para>
	  Instead of specifying the location of the data
	  directory, you can make a local copy of the Data directory 
	  that is also called <filename>Data/</filename>:

    <screen><prompt>%</prompt> <userinput>cp -r <replaceable>somewhere</replaceable>/Data .</userinput></screen>

	Then <command>bali-phy</command> will find the data directory
	at the default location <filename>Data/</filename>, but only
	if you run it in the directory as the local copy.
	</para>
      </sect3>

    </sect2>

    <sect2>
      <title>Option files (Scripts)</title>
      <para>
	Putting the analysis options in an option file instead
	of on the command line can be more convenient if you are going
	to run the same analysis many times, or if you have a large
	number of options.  In addition, the option file may
	contain comments and blank lines, and can be a good way to
	record what options you used in an analysis.
      </para>

      <sect3>
	<title>Syntax</title>
      <para>
	An option file is specified the option "<userinput>--config
	<replaceable>file</replaceable></userinput>" and uses the same
	option names as the command line.  However, the syntax is
	different.  In the option file, each given option is
	on its own line using the syntax "<userinput>option =
	value</userinput>" instead of the syntax "<userinput>--option
	value</userinput>".  If the option has no value then it is
	given using the syntax  "<userinput>option =
	option</userinput>".  If values for an option are given both
	on the the command line and in an option file, then the
	command line value overrides the value in the option file.
      </para>
      </sect3>

      <sect3>
	<title>Example</title>
	<para>
  For example, consider the following
	option file:
<programlisting format="linespecific">#select a data set to analyze
align = examples/EF-Tu/5d.fasta

#select an substitution model
smodel = log-normal+INV

#fix the alignment and do not model indels
traditional = traditional
</programlisting>
        The first option, <userinput>align</userinput> is the name of
	the sequence file, which has no name on the command line.
	Lines that begin with # are comments, and blank lines are
	ignored.  The option <userinput>--traditional</userinput> uses
	the option name as the value, because it does not take a
	value.  Thus, this configuration file corresponds to the
	command line
<screen><prompt>%</prompt> <userinput>bali-phy examples/EF-Tu/5d.fasta --smodel log-normal+INV --traditional</userinput>
</screen>
      </para>
      </sect3>

      <sect3>
	<title>The configuration file</title>
	<para>
	  The file <filename>~/.bali-phy</filename> is a special
	  option file called the <emphasis>configuration
	  file.</emphasis>  If it exists, it is always loaded, if
	  options are given on the command line or an option file they
	  always override values given in the configuration file.  You
	  should use your configuration file to set global values that
	  are the same in all your analyses, such as the location of
	  the Data directory.  Thus, you probably would not want to
	  set <userinput>align</userinput> in this file.  However,
	  setting <userinput>smodel</userinput> would change the
	  default substitution model while allowing a specific
	  analysis to override the default.
	</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Running long simulations</title>
      <para>In order to run <command>bali-phy</command> for long
      periods of time, some modifications to the above commands may be
      necessary.</para>

      <sect3>
	<title>CPU time limits</title>
	<para>If <command>bali-phy</command> is terminating
	prematurely, CPU time limits may be the cause.  In the BASH
	shell you can find the soft and hard time limits (in seconds)
	using the commands <userinput>ulimit -St</userinput> and 
	<userinput>ulimit -Ht</userinput>
	respectively. <application>BAli-Phy</application> ignores the 
	soft limit, but cannot ignore the hard limit.  If the hard
	limit is not long enough, you must ask your system
	administrator to change it for you.
        </para>
      </sect3>

      <sect3>
	<title>Hangup (HUP) Signals</title>
	<para>Most programs will terminate when you log out,
        or when you close the terminal that started them.  The 
        <command>nohup</command> command is often used to avoid this.
        <application>BAli-Phy</application> ignores the HUP (hangup)
        signal in versions 1.9.9 and newer, making
	<command>nohup</command> unnecessary. 
        </para>
      </sect3>

      <sect3>
	<title>Submitting jobs on an SGE cluster</title>
	<para>
        You can use the wrapper script <command>bali-phy-sge</command>
	to submit a <command>bali-phy</command> job on an SGE
	cluster.  It takes the same arguments as
	<command>bali-phy</command>, and submits a job for you using the
	<command>qsub</command> command.
        </para>
      </sect3>

    </sect2>

  </sect1>
  
  <sect1>
    <title>Command-line options</title>

    <sect2>
      <title>Usage</title>

      <para>The syntax for the program is:</para>

      <cmdsynopsis>
	<command>bali-phy</command>
	<arg choice='req'><replaceable>sequence-file</replaceable></arg>
	<arg>OPTIONS</arg>
      </cmdsynopsis>

      <para>The sequence file is the only required argument.  It can
      be either a FASTA (*.fasta) file or a PHYLIP (*.phy) file.  The
      file must end in one of these two suffixes or
      <application>BAli-Phy</application> won't know how to read
      it. In addition your FASTA files should not contain any blank
      lines.</para> 

      <para>The optional arguments are described below.</para>
	
    </sect2>

    <sect2>
      <title>General options</title>
      
      <variablelist>

	<varlistentry>
	  <term><option>--help</option></term>
	  <listitem><para>Show help message.</para></listitem>
	</varlistentry>


	<varlistentry>
	  <term><option>--version</option></term>
	  <listitem><para>Show version information.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--config <replaceable>file</replaceable></option></term>
	  <listitem><para>Option file to read.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--show-only</option></term>
	  <listitem><para>Analyze initial values and exit.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--seed <replaceable>seed</replaceable></option></term>
	  <listitem><para>Use the specified seed to initialize the
	  random number generator.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--data-dir <replaceable>directory</replaceable></option></term>
	  <listitem><para>Specify the data directory.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--name <replaceable>string</replaceable></option></term>
	  <listitem><para>Specify the name for the analysis directory.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--align-constraint <replaceable>file</replaceable></option></term>
	  <listitem><para>Specify a file with alignment constraints</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--traditional</option></term>
	  <listitem><para>Fix the alignment and don't model indels.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--letters star</option></term>
	  <listitem><para>Use a star tree for the substitution model.</para></listitem>
	</varlistentry>


      </variablelist>
    </sect2>

    <sect2>
      <title>MCMC options</title>

      <variablelist>
	<varlistentry>
	  <term><option>--iterations <replaceable>number=100000</replaceable></option></term>
	  <listitem><para>Specify the number of iterations to run.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--subsample <replaceable>factor=1</replaceable></option></term>
	  <listitem><para>Specify a factor by which to subsample.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--T <replaceable>temperature=1</replaceable></option></term>
	  <listitem><para>Specify a temperature for MCMCMC.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--enable <replaceable>move</replaceable></option></term>
	  <listitem>
	    <para>Enable a comma-separated list of transition kernels.</para>
	  </listitem>
	</varlistentry>

	  <varlistentry>
	  <term><option>--disable <replaceable>move</replaceable></option></term>
	  <listitem>
	    <para>Disable a comma-separated list of transition kernels.</para>
	  </listitem></varlistentry>

      </variablelist>
    </sect2>


    <sect2>
      <title>Parameter options</title>
      <variablelist>
	<varlistentry>
	  <term><option>--randomize-alignment</option></term>
	  <listitem><para>Randomly re-align sequences before use.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--internal +</option></term>
	  <listitem><para>Set all internal node entries wildcards initially.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--tree <replaceable>file</replaceable></option></term>
	  <listitem><para>Specify file with initial tree.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--set <replaceable>parameter=value</replaceable></option></term>
	  <listitem><para>Specify initial value of <replaceable>parameter</replaceable>.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--fix <replaceable>parameter[=value]</replaceable></option></term>
	  <listitem><para>Mark <replaceable>parameter</replaceable> fixed, and optionally specify a value.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--unfix <replaceable>parameter[=value]</replaceable></option></term>
	  <listitem><para>Mark <replaceable>parameter</replaceable> not fixed, and optionally specify an initial value.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--frequencies <replaceable>frequencies</replaceable></option></term>
	  <listitem><para>Specify initial frequencies: 'uniform','nucleotides', or a comma-separated list of frequencies.</para></listitem>
	</varlistentry>

      </variablelist>

    </sect2>

    <sect2>
      <title>Model options</title>

      <variablelist>
	<varlistentry>
	  <term><option>--alphabet <replaceable>name</replaceable></option></term>
	  <listitem><para>Specify the alphabet: DNA, RNA, Amino-Acids, Amino-Acids+stop, Triplets, Codons, or Codons + stop.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--genetic-code <replaceable>file=standard-code.txt</replaceable></option></term>
	  <listitem><para>Specify alternate genetic code file in the
	  data directory.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--smodel <replaceable>name</replaceable></option></term>
	  <listitem><para>Specify the substitution model.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--imodel <replaceable>name</replaceable></option></term>
	  <listitem><para>Specify the indel model.</para></listitem>
	</varlistentry>

      </variablelist>

    </sect2>


  </sect1>

  <sect1>
    <title>Examples</title>
    <para>Here are some examples which demonstrate how to run
    <application>BAli-Phy</application>.  In order to run these
    examples, you must first do two things.  Firstly, you must specify
    the location of the <filename>Data/</filename> directory is specified as in <xref
    linkend="spec_data_dir"/>.</para>

    <para>Secondly, you must find the <filename>examples/</filename>
    directory which contains the example files.  Typically, the
    <filename>examples/</filename> directory will be found at
    <filename><replaceable>prefix</replaceable>/share/bali-phy/examples/</filename> if you installed <application>bali-phy</application> in directory <replaceable>prefix</replaceable>.
    </para>

    <example>
      <title>No frills</title>
      <para>Here we analyze the EF-Tu 5-taxon data set provided with
      the software.</para>
      <screen> <prompt>%</prompt> <userinput>bali-phy <replaceable>somewhere</replaceable>/examples/EF-Tu/5d.fasta</userinput></screen>
    </example>

    <example>
      <title>Multiple-Rate Substitution Model</title>
      <para>We now modify the previous example by changing the
      substitution model to allow log-normal-distributed rate variation and
      invariant sites.  The amount of rate variation and the fraction of
      invariant sites are estimated</para>
      
      <screen> <prompt>%</prompt> <userinput>bali-phy <replaceable>somewhere</replaceable>/examples/EF-Tu/5d.fasta --smodel log-normal+INV --randomize-alignment</userinput></screen></example>

    <example>
      <title>Fixed alignment</title>
      <para>Here we use the 5S rRNA 5-taxon data set provided with
      the software.  The alignment is fixed and the traditional
      likelihood model is used, making indels non-informative.  In
      addition, the transition kernel which samples nucleotide frequencies
      is disabled, fixing the nucleotide frequencies to empirical values
      estimated from the input sequences.
      </para> 

      <screen> <prompt>%</prompt> <userinput>bali-phy <replaceable>somewhere</replaceable>/examples/5S-rRNA/5d.fasta --smodel pi=constant --traditional</userinput></screen>

    </example>
  </sect1>

  <sect1>
    <title>Input</title>

    <sect2>
      <title>Sequence formats</title>
      <para><application>BAli-Phy</application> can read in sequences
      and alignments in both FASTA and PHYLIP formats.  However, in
      FASTA format, the file must not contain blank lines between the
      sequences, because <application>BAli-Phy</application> will stop
      reading in sequences when it sees a blank line.
      </para>
    </sect2>

    <sect2>
      <title>Is my data set too large?</title>

      <para>Large data sets run more slowly than small data
      sets. We recommend a conservative starting point with few taxa
      and short sequence lengths.  You can then increase the size of
      your data set until a balance between speed and size is
      reached.</para> 

      <para>The number of samples that you need depends on whether you
      are primarily interested in obtaining a point estimate or in
      obtaining detailed measures of confidence and uncertainty.  For
      detailed measures of confidence and uncertainty you should
      obtain a minimum of 10,000 samples after the Markov chain
      converges.  For an estimate, you don't need very many samples
      after convergence.  (But you may need many samples to be sure
      that you've converged!)
      </para>

      <sect3>
	<title>Too many taxa?</title>

	<para><application>BAli-Phy</application> is quite CPU
	intensive, and so we recommend using 12 or fewer taxa in order
	to limit the time required to accumulate enough MCMC samples.
	We note that many phylogenetic hypotheses can be reduced to
	hypotheses concerning only four taxa.  We recommend initially
	removing as many taxa as possible from your data set.  You can
	then add taxa back into the data set after you have determined
	how much this will increase the duration of the run.</para>

      </sect3>

      <sect3>
	<title>Sequences too long?</title>

	<para>Aligning sequences takes $O(L^2)$ time and RAM, where 
	$L$ represents the sequence length.  Thus, doubling the length
	of the input sequences increases RAM requirements and run
	time by a factor of 4.  Therefore sequence lengths beyond
	750 letters may prove impractical due to limited RAM or the
	speed of the calculation.   For protein sequences,
	we recommend coding the sequences in terms of amino acids or
	codons, rather than nucleotides.</para>

	<para>However, you might try to see how long you can make your
	sequences before the attempt becomes impractical.</para>
      </sect3>

    </sect2>

  </sect1>

  <sect1>
    <title>Models</title>

    <sect2 id="subst_basic">
      <title>Substitution models (Basic)</title>
      <para>The basic substitution models in
      <application>BAli-Phy</application> are continuous-time Markov
      chains (CTMC). More advanced models such as the $\Gamma_4+INV$
      model or the M2 codon model are described in section
      (<xref linkend="subst_adv"/>). CTMC models can be characterized
      by transition rates $Q_{ij}$ from letter $i$ to letter $j$.
      After a given time $t$ the probability for transition from state
      $i$ to state $j$ is given by \[P(t)_{ij}=e^{Q_{ij} \times t}\]
      using a matrix exponential.  Becase the The CTMC models used in
      <application>BAli-Phy</application> are all reversible, the rate
      matrix for these reversible models can be decomposed into a
      symmetric matrix $S$ and equilibrium frequencies $\pi$ as
      follows:  \[Q_{ij} = S_{ij}\times\pi_j\]
      The matrix $S$ is called the exchangability matrix, and
      represents how exchangeable letters $i$ and $j$ are
      independent of their frequencies.
      </para>

      <sect3>
	<title>Basic CTMC models</title>
	<para>The basic CTMC models are EQU, HKY, TN, GTR, HKYx3,
	TNx3, GTRx3,  Empirical, and M0.  Each of these models is a
	way of specifying the exchangeability matrix $S_{ij}$.</para>
      </sect3>

      <sect3>
	<title>Default substitution models</title>
	<para>If the substitution model is not specified, then the
	default model for the alphabet is used.  For DNA or RNA, the
	default model is HKY.  For Triplets, the default is HKYx3. For
        Codons, the default model is M0.  For Amino-Acids, the
	default model is Empirical[WAG]. 
	</para>
      </sect3>

      <sect3>
	<title>Extended model descriptions</title>

	<table frame="none" rowsep="1">
	  <title>Substitution Models</title>
	  <tgroup cols='4'>
	    <colspec colnum="1" colname="col1" colwidth="1*"/>
	    <colspec colnum="2" colname="col2" colwidth="1*"/>
	    <colspec colnum="3" colname="col3" colwidth="1*"/>
	    <colspec colnum="4" colname="col4" colwidth="1*"/>
	  <thead><row>
	    <entry>Model</entry>
	    <entry>Alphabet</entry>
	    <entry>Parameters</entry>
	    <entry>Description</entry>
	  </row></thead>

	  <tbody>
	    <row>
	      <entry><userinput>EQU</userinput></entry>
	      <entry>any</entry>
	      <entry>none</entry>
	      <entry>$S_{ij} = 1$ for every $i$ and $j$.</entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>HKY</userinput></para>
		<para>Hasegawa, Kishino, Yano (1985)</para>
	      </entry>
	      <entry>DNA or RNA</entry>
	      <entry>$\kappa$: the ts/tv ratio.</entry>
	      <entry>
		<para>$S_{ij} = 1$ for transversions.</para>
		<para>$S_{ij} = \kappa$ for transitions.</para>
	      </entry>
	    </row>

	    <row>
	      <entry><para><userinput>TN</userinput></para><para>Tamura, Nei (1993)</para></entry>
	      <entry>DNA or RNA</entry>
	      <entry>
		<para>$\kappa_1$: the purine ts/tv ratio.</para>
		<para>$\kappa_2$: the pyrimidine ts/tv ratio.</para>
	      </entry>
	      <entry>
		<para>$S_{ij} = 1$ for transversions.</para>
		<para>$S_{ij} = \kappa_1$ for purine transitions.</para>
		<para>$S_{ij} = \kappa_2$ for pyrimidine transitions.</para>
	      </entry>
	    </row>

	    <row>
	      <entry><para><userinput>GTR</userinput></para><para>General Time-Reversible</para><para>Tavare (1986)</para></entry>
	      <entry>DNA or RNA</entry>
	      <entry>
		<para>$S_{i \ne j}$</para>
	      </entry>
	      <entry>
		<para>$\sum_{i \ne j}S_{ij}=1$.</para><para>(5 degrees of freedom).</para>

	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>Empirical[WAG]</userinput></para>
		<para>Whelan and Goldman (2001)</para>
	      </entry>
	      <entry>Amino-Acids</entry>
	      <entry>
		<para>none.</para>
	      </entry>
	      <entry></entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>HKYx3</userinput></para>
		<para><userinput>TNx3</userinput></para>
		<para><userinput>GTRx3</userinput></para>
	      </entry>
	      <entry>Triplets</entry>
	      <entry>
		<para><replaceable>nuc-model</replaceable> parameters.</para>
	      </entry>
	      <entry>
		<para>If the nuc-model has transition matrix
		$S^\prime_{ij}$ on nucleotides, then:</para>

		<para>$S_{\alpha\beta} = 0$ for changes of more than one nucleotide.</para>
		<para>$S_{\alpha\beta} = S^\prime_{ij}$ for single nucleotide  changes $i \to j$.</para>
	      </entry> 
	    </row>

	    <row>
	      <entry>
		<para><userinput>M0</userinput></para>
		<para>Nielsen and Yang (1998)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para>$\kappa$: the ts/tv ratio.</para>
		<para>$\omega$: the dn/ds ratio.</para>
	      </entry>
	      <entry>
		<para>$S_{\alpha\beta} = 0$ for changes of more than one nucleotide.</para>
		<para>$S_{\alpha\beta} = 1$ for synonymous transversions.</para>
		<para>$S_{\alpha\beta} = \omega$ for non-synonymous transversions.</para>

		<para>$S_{\alpha\beta} = \kappa$ for synonymous transitions.</para>
		<para>$S_{\alpha\beta} = \omega\kappa$ for non-synonymous transitions.</para>
	      </entry> 
	    </row>

	    <row>
	      <entry>
		<para><userinput>M0[<replaceable>nuc-model=HKY</replaceable>]</userinput></para>
		<para>Nielsen and Yang (1998)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para><replaceable>nuc-model</replaceable> parameters.</para>
		<para>$\omega$: the dn/ds ratio</para>
	      </entry>
	      <entry>
		<para>If the nuc-model has transition matrix
		$S^\prime_{ij}$ on nucleotides, then:</para>

		<para>$S_{\alpha\beta} = 0$ for changes of more than one nucleotide.</para>
		<para>$S_{\alpha\beta} = S^\prime_{ij}$ for synonymous changes.</para>
		<para>$S_{\alpha\beta} = \omega S^\prime_{ij}$ for non-synonymous changes.</para>
	      </entry> 
	    </row>
	  </tbody>
	  </tgroup>
	</table>

      </sect3>
    </sect2>

    <sect2>
      <title>Indel models</title>
      <para>The current models are simple, fragments, and fragments+T.  The
      default is fragments+T.</para>
    </sect2>

    <sect2>
      <title>Alignment constraints</title>
      <para>To pin columns of the alignment, specify alignment
      constraints in a file as follows: </para>

      <orderedlist inheritnum="ignore" continuation="restarts">
	<listitem><para>Use the argument
	<userinput>--align-constraint <replaceable>filename</replaceable></userinput></para></listitem> 

	<listitem><para>The filename refers to a file in which each
	line represents a constraint.</para></listitem> 

      </orderedlist>

      <sect3>
	<title>Syntax</title>
      <para>The first line of the file is a header consisting of an
   ordered list of sequence names separated by spaces. Each subsequent line
   consists of a space-separated list of sequence positions, with the first position
   corresponding to the first leaf sequence, the second position
   corresponding to the second leaf sequence, etc. Thus, if there are
   <replaceable>n</replaceable> leaf taxa, then each line corresponds to a
   space-separated list of <replaceable>n</replaceable> integers.</para>
      </sect3>
      <sect3>
	<title>Examples</title>
      <para>For example, the file</para>

      <programlisting format="linespecific">A B C
1 2 2</programlisting>

      <para>implies that position 1 of leaf sequence A is aligned to
      position 2 of leaf sequences B and C. Note that the first
      position in a sequence is position 0.</para> 

      <para>Optionally, one may use a '-' instead of an integer, which
      denotes a lack of constraint for that sequence. This can be
      useful as follows:</para> 

<programlisting format="linespecific">A B C D
2 2 - - 
- - 2 2
</programlisting>

      <para>The above constraints force alignment between position 2
   of sequences A and B, and between position 2 of sequence C and
   D.</para>
      </sect3>

      <sect3>
	<title>Computing the constraints</title>
	<para>
	  The program <command>alignment-indices</command> may be used
	  to aid in computing a constraint file from an input
	  alignment.  Each line in the resulting file is a constraint 
	  corresponding to one column of the input alignment.
	  Simply remove the constraints that you do not want to keep.
	</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="subst_adv">
    <title>Substitution Models (Advanced)</title>
    <para>
      Advanced substitution models in <application>BAli-Phy</application>
      are constructed as mixtures of the basic CTMC models (see <xref
      linkend="subst_basic"/>) run at different rates (e.g. $\Gamma_4+INV$)
      or parameters (e.g. an M2 codon model).
    </para>

      <sect2>
	<title>Specifying a substitution model</title>

	<para>Substitution models are specified using a stack, as
	follows:
<userinput>Model[arg]+Model[arg]+...+Model[arg]</userinput>
        where each model uses the previous models as input.  Arguments
	are optional.
	</para>

      <para>The basic CTMC models are EQU, HKY, TN, GTR, Empirical, and M0.</para>

      <para>Model modifiers are gamma, log-normal, INV, M2, M3, and M7.</para>
      </sect2>

      <sect2>
	<title>CTMC Frequency models</title>
	<para>The above decomposition can be generalized slightly to
	yield the following decomposition, where $f$ ranges from $0$ to $1$.
	\[Q_{ij} = S_{ij}\times\frac{\pi_j^f}{\pi_i^{1-f}},\]
	Here the parameter $f$ specifies the relative importance of
	unequal conservation ($f=0$) and unequal replacement ($f=1$) in
	maintaining the equilibrium frequencies $\pi$.  
	</para>
	<para>
	In fact, this can be generalized even further to \[ Q_{ij} =
	S_{ij}\times R(\pi)_{ij} \] where \[ \pi_i \times R_{ij} =
	\pi_j \times R_{ji}. \]
	</para>
	<para>These models can therefore be expressed as a combination
	of an "exchange model" (for $S$) and a "frequency model" (for
	$R$).
	</para>
      </sect2>

      <sect2>
	<title>Frequency Models</title>
	<para>
	</para>
	<table frame="none" rowsep="1">
	  <title>Frequency Models</title>
	  <tgroup cols='4'>
	    <colspec colnum="1" colname="col1" colwidth="1*"/>
	    <colspec colnum="2" colname="col2" colwidth="1*"/>
	    <colspec colnum="3" colname="col3" colwidth="1*"/>
	    <colspec colnum="4" colname="col4" colwidth="1*"/>
	  <thead><row>
	    <entry>Model</entry>
	    <entry>Alphabet</entry>
	    <entry>Parameters</entry>
	    <entry>Description</entry>
	  </row></thead>

	  <tbody>
	    <row>
	      <entry>
		<para><userinput>pi</userinput></para>
		<para>Simple frequency model</para>
	      </entry>
	      <entry>any</entry>
	      <entry>
		<para>$f$ (1)</para>
		<para>$\pi$ ($|\alpha|$) </para>
	      </entry>
	      <entry>$R_{ij} = \frac{\pi_j^f}{\pi_i^{1-f}}$.</entry>
	    </row>
	    <row>
	      <entry>
		<para><userinput>pi=nucleotides</userinput></para>
		<para>Independent nucleotide frequency model</para>
	      </entry>
	      <entry>Triplets</entry>
	      <entry>
		<para>$f$ (1)</para>
		<para>$\pi_N$ (4) </para>
	      </entry>
	      <entry>
		<para>$\pi_\alpha = \pi_i \pi_j \pi_k$</para>
		<para>$R_{\alpha\beta} = \frac{\pi_\beta^f}{\pi_\alpha^{1-f}}$.</para>
	      </entry>
	    </row>
	    <!-- row>
	      <entry><userinput>pi=triplets</userinput></entry>
	      <entry>Triplets</entry>
	      <entry>
		<para>$f$ (1)</para>
		<para>$g$ (1)</para>
		<para>$\pi$ (4) </para>
		<para>$\nu$ ($|\alpha|$) </para>
	      </entry>
	      <entry>$R_{\alpha\beta} = \frac{{(\pi_i \pi_j
	      \pi_l)}^f}{{(\pi_i \pi_j \pi_k)}^{1-f}} \times \frac{\nu_\beta}{\nu_\alpha}$.</entry>
	    </row -->
	    <row>
	      <entry>
		<para><userinput>pi=amino-acids</userinput></para>
		<para>Amino-acid based codon frequencies. (no codon bias)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para>$f$ (1)</para>
		<para>$\pi_{AA}$ (20)</para>
	      </entry>
	      <entry>$R_{ij} = \frac{\pi_j^f}{\pi_i^{1-f}}$.</entry>
	    </row>
	    <!-- row>
	      <entry><userinput>pi=codons</userinput></entry>
	      <entry>Codons</entry>
	      <entry>$f$</entry>
	      <entry>$R_{ij} = \frac{\pi_j^f}{\pi_i^{1-f}}$.</entry>
	    </row -->
	  </tbody>
	  </tgroup>
	</table>
      </sect2>
      
      <sect2>
	<title>CTMC Mixture Models</title>
	<table frame="none" rowsep="1">
	  <title>Extended Model Descriptions</title>
	  <tgroup cols='4'>
	    <tbody>
	    <row>
	      <entry>
		<para><userinput><replaceable>sm</replaceable> + INV</userinput></para>
	      </entry>
	      <entry><replaceable>sm</replaceable> alphabet</entry>
	      <entry>
		<para>$p$: invariant fraction.</para>
	      </entry>
	      <entry>
	      <para>A fraction $p$ of sites do not allow substitutions.</para>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput><replaceable>sm</replaceable> + gamma[$n$]</userinput></para>
		<para>Yang (1994)</para>
	      </entry>
	      <entry><replaceable>sm</replaceable> alphabet</entry>
	      <entry>
		<para>$\sigma/\mu$: noise to signal ratio for $\Gamma$.</para>
	      </entry>
	      <entry>
	      <para>rate $\sim \Gamma(\mu=1,\sigma)$.</para>
	      <para>A discrete approximation to the $\Gamma$ with $n$
     	            bins is used.</para>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput><replaceable>sm</replaceable> + log-normal[$n$]</userinput></para>
	      </entry>
	      <entry><replaceable>sm</replaceable> alphabet</entry>
	      <entry>
		<para>$\sigma/\mu$: noise to signal ratio for $\log Normal$.</para>
	      </entry>
	      <entry>
	      <para>rate $\sim \log Normal(\mu=1,\sigma)$.</para>
	      <para>A discrete approximation to the $log Normal$ with $n$
     	            bins is used.</para>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M2</userinput></para>
		<para><userinput><replaceable>sm</replaceable> + M2</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para>$\kappa$: the ts/tv ratio</para>
		<para>$p_1, p_2, p_3$: bin frequencies.</para>
		<para>$\omega_3$: value of $\omega$ in bin 2.</para>
	      </entry>
	      <entry>
	      <para>$\Omega=\omega_i$ with probability $p_i$.</para>
	      <para>$\omega_1 = 0$, $\omega_2 = 1$.</para>
	      <para>The default for <replaceable>sm</replaceable> is M0.</para>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M3[$n$]</userinput></para>
		<para><userinput><replaceable>sm</replaceable> + M3[$n$]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para>$\kappa$: the ts/tv ratio</para>
		<para>$p_1, \ldots, p_n$: bin frequencies.</para>
		<para>$\omega_1, \ldots, \omega_n$: values of $\omega$.</para>
	      </entry>
	      <entry>
	      <para>$\Omega=\omega_i$ with probability $p_i$.</para>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M7[$n$]</userinput></para>
		<para><userinput><replaceable>sm</replaceable> + M7[$n$]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para>$\mu$: mean of the Beta distribution.</para>
		<para>$\sigma/\mu$: noise to signal ratio for Beta.</para>
	      </entry>
	      <entry>
	      <para>$\Omega \sim Beta(\mu,\sigma)$.</para>
	      <para>A discrete approximation to the Beta with $n$
     	            bins is used.</para>
	      </entry>
	    </row>

	  </tbody>

	  </tgroup>
	</table>


      </sect2>

      <sect2>
	<title>Examples</title>
	<para>Example: --smodel EQU --alphabet Triplets</para>
	<para>Example: --smodel HKY</para>
	<para>Example: --smodel TN+pi=constant</para>
	<para>Example: --smodel Empirical[WAG]+log-normal+INV</para>
	<para>Example: --smodel M0 --alphabet Codons</para>
	<para>Example: --smodel M0+pi=nucleotides --alphabet Codons</para>
	<para>Example: --smodel M2 --alphabet Codons</para>
	<para>Example: --smodel M0[TN]+M2 --alphabet Codons</para>
      </sect2>


  </sect1>

  <sect1>
    <title>Output</title>

    <sect2>
      <title>Output directory</title>
      <para><application>BAli-Phy</application> creates a new
      directory to store its output files each time it is run.  By default, the
      directory name is the name of the sequence file, with a number
      added on the end to make it unique. <application>BAli-Phy</application>
      first checks  if there is already a directory called
      <filename><replaceable>file</replaceable>-1/</filename>, and then moves on to
      <filename><replaceable>file</replaceable>-2/</filename>, etc. until it finds an
      unused directory name.</para> 
      
      <para>You can specify a different name to use instead of the
      sequence-file name by using the <userinput>--name</userinput> option.</para>
    </sect2>

    <sect2>
      <title>Output files</title>
      <para><application>BAli-Phy</application> produces the following output
      files inside the directory that it creates:</para>
      
      <variablelist>
	<varlistentry>
	  <term>1.out</term>
	  <listitem>
	    <para>Iteration numbers, alignments, and probabilities.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>1.err</term>
	  <listitem>
	    <para>Success probabilities for transition kernels.</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>1.MAP</term>
	  <listitem>
	    <para>Successive estimates of the MAP point</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>1.p</term>
	  <listitem>
	    <para>Scalar parameters: indel and substitution parameters, etc.</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>1.trees</term>
	  <listitem>
	    <para>Tree samples</para>
	  </listitem>
	</varlistentry>
	
      </variablelist>
      
      <para>For the last two files, each line in these files corresponds to one iteration.</para>
    </sect2>
  </sect1>

  <sect1 id="mixing_and_convergence">
    <title>Convergence and Mixing: Is it done yet?</title>

    <para>
      When using Markov chain Monte Carlo (MCMC) programs like
      <application>MrBayes</application>, <application>BEAST</application> or
      <application>BAli-Phy</application>, one of the key questions is
      how many iterations are required to give a good estimate.
      Unfortunately, this question is complicated and depends upon
      both the problem and the specific data set that is being
      examined.  As a result, <application>BAli-Phy</application>
      relies on the user to determines when enough samples have been
      obtained - and to terminate the program when this happens. 
    </para>

    <para>
      In general, we recommend that you analyze the data from a
      running chain periodically and repeatedly in order to determine
      when to stop it.
    </para>

    <para>
      To inspect the Markov chain generated by
      <application>BAli-Phy</application>, we recommend the program
      <ulink url="http://evolve.zoo.ox.ac.uk/software/tracer/">Tracer</ulink>. 
      You can open the file <filename>1.p</filename> in Tracer to view
      traceplots and to estimate the effective sample size.  However,
      these techniques that work well for numerical parameters do not
      work well for objects such as trees and alignments.  Therefore,
      the full analysis is necessary as well (<xref linkend="analysis"/>).
    </para>

    <sect2>
      <title>Convergence</title>

      <sect3>
	<title>Definition</title>

	<para>
	  What is convergence, and how can you check if a Markov chain
	  has "converged"?  We first note that "convergence" refers to
	  the tendency of a Markov chain to converge to the desired
	  distribution (its equilibrium distribution).  The Markov chain starts at a
	  specific tree and alignment, which may not be representative
	  of the equilibrium distribution, and so convergence
	  represents the process of "forgetting" the starting value.
	  If we represent the i-th iteration of the Markov chain as
	  X[i], then we desire rapid convergence of the distribution
	  of X[i] to the equilibrium distribution.
	</para>

      </sect3>

      <sect3>
	<title>Burn-in</title>
	<para>
	  In practice, most MCMC analyses designate some number of
	  samples at the beginning of each chain as "burn-in".  These
	  samples are discarded because they represent the initial
	  starting point, but not the equilibrium distribution.
	</para>

	<para>
	  Determining the number of samples to discard as burn-in is
	  usually rather ad-hoc.  MCMC practitioners often run the
	  chain for a "long" time, and then visually inspect the
	  samples, perhaps using <ulink url="http://evolve.zoo.ox.ac.uk/software/tracer/">Tracer</ulink>. After some number of iterations, the 
	  samples become "typical" of later values, and that number
	  is chosen as the burn-in.  Unfortunately, it is always
	  possible that if you run the Markov chain even longer, then
	  the values will change again.  Therefore, this method is not
	  strong evidence that a chain converges before a given burn-in time.
	</para>
      </sect3>

      <sect3>
	<title>Testing Convergence</title>
	<para>
	  A better (but not perfect) test of convergence is to run
	  several independant chains starting from many different
	  places.  It is possible that each Markov chain will get
	  stuck in local optima near its own starting value, but that
	  the movement between the different local optima will be
	  exceedingly slow.  However, if the posterior distributions
	  from each Markov chain seem to be the same, then that gives some
	  evidence that the MCMC procedure is truly converging to a
	  global equilibrium.
	</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Mixing</title>
      <sect3>
	<title>Definition</title>
	<para>
	  In MCMC, each sample is not fully independent of previous
	  samples.  In fact, a Markov chain can get "stuck" in one part
	  of the parameter space for a long time, before jumping to an
	  equally important part.  When this happens, we say that the
	  chain isn't "mixing" well.
	</para>
      </sect3>

      <sect3>
	<title>Measures: how good is the mixing?</title>
	<para>
	  For continuous parameters, one common measure is the
	  effective sample size (ESS).  Given a collection of
	  <emphasis>dependent</emphasis> samples from a Markov chain,
	  the effective sample size is the equivalent number of
	  <emphasis>independent</emphasis> samples.  However, there
	  are many ways one could measure "equivalence".  The usual
	  way is to compare samples based on the variance of the sum
	  of the values.
	</para>
      </sect3>
    </sect2>

    
  </sect1>

    <sect1 id="analysis">
      <title>Analyzing the output</title>
      
      <para>
	In addition to running the full analysis, it will be helpful
	to analyze the numerical parameters using
	<application>Tracer</application> (<xref
	linkend="mixing_and_convergence"/>).  The full analysis should
	be run repeatedly as the simulation progresses, to determine
	when enough samples have been collected.
      </para>


      <sect2>
	<title>How to run the full analysis</title>

      <para>
      First, enter the output directory.  Then make a local copy of
      the the analysis makefile:
<screen><prompt>%</prompt> <userinput>cp <replaceable>prefix</replaceable>/share/doc/bali-phy/GNUmakefile .</userinput></screen>
      Here, <replaceable>prefix</replaceable> is the directory where
      you installed <application>BAli-Phy</application>.
      </para>

      <para>After you have installed the analysis makefile, run the command:

      <screen> <prompt>%</prompt> <userinput>SKIP=<replaceable>burn-in</replaceable> make</userinput></screen>

      or

      <screen> <prompt>%</prompt> <userinput>SKIP=<replaceable>burn-in</replaceable> SIZE=<replaceable>iterations</replaceable> make</userinput></screen>

      Here, <replaceable>burn-in</replaceable> represents the
      number of iterations to skip as burn-in, and
      <replaceable>iterations</replaceable> represents the maximum
      number of iterations to use in the analysis. In order for this
      to work, the directory containing the
      <application>BAli-Phy</application> tools must be in your PATH.
      </para>

      <para>Running the analysis will produce the three directories:
      <filename>Results/</filename>, <filename>Mixing</filename>, and
      <filename>Work/</filename>.  The <filename>Results/</filename>
      directory contains tree and alignment estimates and confidence
      levels.   The <filename>Mixing/</filename> directory contains various
      measures of whether the chain ran long enough given its Mixing.
      The <filename>Work/</filename> directory contains various
      intermediate files that you probably do not need.</para>


      </sect2>

      <sect2>

	<title>Results/</title>

	<para>Running the above command will produce the following files in
	the <filename>Results/</filename> directory:</para>

      <variablelist>

	<varlistentry><term>analysis</term><listitem>
	<para>A description of the analysis:  burn-in, length, time completed.
	</para></listitem></varlistentry>

	<varlistentry><term>Report</term><listitem>
	<para>A summary of results: posterior means and credible intervals,
	etc..</para>
	</listitem></varlistentry>

	<varlistentry><term>consensus</term><listitem>
	<para>Summary of MAP and consensus topologies, as well as supported
	partitions. </para>
	</listitem></varlistentry>

	<varlistentry><term>c-levels.plot</term><listitem>
	<para>The number of partitions supported at each LOD level.</para>
	</listitem></varlistentry>

	<varlistentry><term>c<replaceable>level</replaceable>.topology</term><listitem>
	<para>The consensus topology at level
	<replaceable>level</replaceable> (Newick format)</para> 
	</listitem></varlistentry>

	<varlistentry><term>c<replaceable>level</replaceable>.tree</term><listitem>	<para>The majority consensus topology + branch lengths (Newick format)</para> 
	</listitem></varlistentry>

	<varlistentry><term>MAP.topology</term><listitem>
	<para>An estimate of the MAP tree (Newick format)</para>
	</listitem></varlistentry>

	<varlistentry><term>MAP.tree</term><listitem>
	<para>An estimate of the MAP topology + branch lengths (Newick format)</para>
	</listitem></varlistentry>

	<varlistentry><term>MAP.fasta</term><listitem>
	<para>An estimate of the MAP alignment, w/ taxa sorted by similarity.
	</para></listitem></varlistentry>

	<varlistentry><term>MAP.phy</term><listitem>
	<para>An estimate of the MAP alignment, w/ taxa sorted by similarity.
	</para></listitem></varlistentry>

      </variablelist>
      <para> 
	In addition, the following files will be generated to summarize alignment uncertainty, unless the analysis uses a fixed alignment.

      </para>

      <variablelist>
	<varlistentry><term>MAP-AU.html</term><listitem><para>An AU plot of the MAP alignment.
	</para></listitem></varlistentry>

	<varlistentry><term>MAP-AU.prob</term><listitem><para>The probabilities for each letter in the MAP alignment AU plot.
	</para></listitem></varlistentry>
    
	<varlistentry><term>consensus.fasta</term><listitem>
	<para>A consensus alignment, representing information shared by most alignment samples.
	</para></listitem></varlistentry>

	<varlistentry><term>consensus-AU.html</term><listitem><para>An AU plot of the consensus alignment.
	</para></listitem></varlistentry>

	<varlistentry><term>consensus-AU.prob</term><listitem><para>The probabilities for each letter in the consensus alignment AU plot.
	</para></listitem></varlistentry>
    
      </variablelist>

    </sect2>

    <sect2>
      <title>Mixing/</title>

      <para>In addition, the following files will be produced in the
      <filename>Mixing/</filename> directory:</para> 

      <para></para>
      <variablelist>

	<varlistentry><term>partitions.bs</term><listitem>
	<para>Confidence intervals on the support for partitions, generated
	using a block bootstrap.</para>
	</listitem></varlistentry>

	<varlistentry><term>partitions.SRQ</term><listitem><para>A collection of
	SRQ plots for the supported partitions.
    </para></listitem></varlistentry>

	<varlistentry><term>c50.SRQ</term><listitem><para>An
	SRQ plot for the majority consensus tree.
    </para></listitem></varlistentry>


      </variablelist>

      <para>The SRQ plots can be viewed by typing "<userinput>plot
      '<replaceable>file</replaceable>' with lines</userinput>" in
      <application>gnuplot</application>.</para>
    </sect2>


  </sect1>

  <sect1>
    <title>Tuning the Markov Chain</title>

    <sect2>
      <title>Parameters</title>
      <para>

	<table frame="none" rowsep="1">
	  <title>Tunable Parameters</title>
	  <tgroup cols='4'>
	    <colspec colnum="1" colname="col1" colwidth="1*"/>
	    <colspec colnum="2" colname="col2" colwidth="1*"/>
	    <colspec colnum="3" colname="col3" colwidth="1*"/>
	    <colspec colnum="4" colname="col4" colwidth="1*"/>
	  <thead><row>
	    <entry>Name</entry>
	    <entry>Variable</entry>
	    <entry>Default</entry>
	    <entry>Meaning</entry>
	  </row></thead>

	  <tbody>
	    <row>
	      <entry>log_branch_sigma</entry>
	      <entry>branch lengths</entry>
	      <entry>0.6</entry>
	      <entry>Scale of log-proposal.</entry>
	    </row>

	    <row>
	      <entry>branch_sigma</entry>
	      <entry>branch lengths</entry>
	      <entry>0.6</entry>
	      <entry>Scale of non-log-proposal.</entry>
	    </row>

	    <row>
	      <entry>mu_scale_sigma</entry>
	      <entry>mu</entry>
	      <entry>0.6</entry>
	      <entry>Width of proposal on log scale.</entry>
	    </row>

	    <row>
	      <entry>kappa_scale_sigma</entry>
	      <entry>HKY::kappa, TN::kappa(pur), TN::kappa(pyr)</entry>
	      <entry>0.3</entry>
	      <entry>Width of proposal on log scale.</entry>
	    </row>

	    <row>
	      <entry>omega_scale_sigma</entry>
	      <entry>M0::omega, M2::omega</entry>
	      <entry>0.3</entry>
	      <entry>Width of proposal on log scale.</entry>
	    </row>

	    <row>
	      <entry>beta::mu_scale_sigma</entry>
	      <entry>beta::mu</entry>
	      <entry>0.2</entry>
	      <entry>Width of proposal.</entry>
	    </row>

	    <row>
	      <entry>INV::p_shift_sigma</entry>
	      <entry>INV::p</entry>
	      <entry>0.03</entry>
	      <entry>Width of proposal.</entry>
	    </row>

	    <row>
	      <entry>gamma::sigma_scale_sigma</entry>
	      <entry>gamma::sigma/mu</entry>
	      <entry>0.25</entry>
	      <entry>Width of proposal of log scale.</entry>
	    </row>

	    <row>
	      <entry>pi_dirichlet_N</entry>
	      <entry>pi*</entry>
	      <entry>1.0</entry>
	      <entry>Tightness of dirichlet proposal for frequencies.</entry>
	    </row>

	    <row>
	      <entry>lambda_shift_sigma</entry>
	      <entry>delta, lambda</entry>
	      <entry>0.35</entry>
	      <entry>Width of proposal.</entry>
	    </row>

	    <row>
	      <entry>epsilon_shift_sigma</entry>
	      <entry>epsilon</entry>
	      <entry>0.15</entry>
	      <entry>Width of proposal.</entry>
	    </row>

	  </tbody>
	  </tgroup>
	</table>
      </para>
    </sect2>
  </sect1>


  <sect1>
    <title>Auxiliary tools</title>

    <sect2>
      <title>alignment-find</title>
      <para>Usage: alignment-find [OPTIONS] &lt; <replaceable>alignments-file</replaceable></para>
      <para>Find the last (or first) FASTA alignment in a file.</para>
    </sect2>

    <sect2>
      <title>alignment-draw</title>

      <para>alignment-draw <replaceable>alignment-file</replaceable> [<replaceable>AU-file</replaceable>] [OPTIONS]</para>
      <para>Draw an alignment to HTML, optionally coloring residues by AU.</para>
    </sect2>



    <sect2>
      <title>trees-consensus</title>
      <para>Usage: trees-consensus <replaceable>file</replaceable>
      [OPTIONS] </para>
      <para>This program analyzes the tree sample contained in
      <replaceable>file</replaceable>.  It reports the MAP topology, the
      supported taxa partitions (including partial partitions), and the
      majority consensus topology.
      </para> 
    </sect2>

    <sect2>
      <title>trees-bootstrap</title>
      <para>Usage: trees-bootstrap <replaceable>file1</replaceable>
      [<replaceable>file2</replaceable> ... ] --predicates
      <replaceable>predicate-file</replaceable> [OPTIONS] </para>
      <para>This program analyzes the tree samples contained in
      <replaceable>file1</replaceable>, <replaceable>file2</replaceable>,
      etc.  It gives the support of each tree sample for each predicate in
      <replaceable>predicate-file</replaceable>, and reports a confidence
      interval based on the block bootstrap.
      </para> 

      <para>Each predicate is the intersection of a set of partitions, and
      is specified as a list of partitions or (multifurcating) trees, one
      per line.  Predicates are separated by blank lines.
      </para>
    </sect2>

    <sect2>
      <title>trees-to-SRQ</title>

      <para>Usage: trees-to-SRQ <replaceable>predicate-file</replaceable> [OPTIONS] <replaceable>trees-file</replaceable> </para>

      <para>This program analyzes the tree samples contained in
      <replaceable>trees-file</replaceable>.  It uses them to produce an
      SRQ plot for each predicate in
      <replaceable>predicate-file</replaceable>.  Plots are produced in
      <application>gnuplot</application> format, with one point per line
      and with plots separated by a blank line.</para>

      <para>If <userinput>--mode sum </userinput> is specified, then a "sum"
      plot is produced instead of an SRQ plot.  In this plot, the slope of
      the curve corresponds to the posterior probability of the event.  If the
      <userinput>--invert</userinput> option is used then the slope of the
      curve correspond to the probability of the inverse event.  This is
      recommended if the probability of the event is near 1.0, because the
      sum plot does not distinguish variation in probabilities near 1.0 well.
      </para>

    </sect2>

  </sect1>

  <sect1>
    <title>Frequently Asked Questions (FAQ)</title>

    <sect2>
      <title>Stopping <command>bali-phy</command>.</title>

    <qandaset>
      <qandaentry>
	<question><para>Why is <command>bali-phy</command> still
	running? How long will it take?</para></question>
	<answer>
	  <para>It runs until you stop it.  Stop it when its
	  done.</para>
	</answer>
      </qandaentry>

      <qandaentry>
	<question><para>So, how can I know when to stop it?</para></question>
	<answer>
	  <para>You can stop it has both converged and also run for long enough to give
	  you >1000 effectively independent samples.  </para>
	</answer>
      </qandaentry>

      <qandaentry>
	<question><para>How can you tell when the chain has converged?</para></question>
	<answer>
	  <para>It depends on the data set.  To test convergence, run at
	  least 4 independent chains (preferably 10) from different
	  random starting points and see if the posterior
	  distributions for each chain are the same. 
	  </para>
	</answer>
      </qandaentry>

      <qandaentry>
	<question><para>How can I check how many iterations the chain
	has finished?</para></question>
	<answer>
	  <para>Run <command>wc -l 1.p</command> inside the output
	  directory, and subtract 2.
	  </para>
	</answer>
      </qandaentry>
    </qandaset>
    </sect2>
  </sect1>

</article>
