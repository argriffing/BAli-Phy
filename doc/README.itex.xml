<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="docbook.xsl"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook MathML Module V1.0//EN"
  "http://www.docbook.org/xml/mathml/1.0/dbmathml.dtd">

<!-- DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
     "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [] -->
<article lang="en">
  <articleinfo>
    <title><application>BAli-Phy</application> User's Guide</title>
    <author>
      <firstname>Benjamin</firstname>
      <surname>Redelings</surname>
    </author>
  </articleinfo>

  <sect1>
    <title>Installation</title>

    <sect2>
      <title>Requirements</title>

      <sect3>
	<title>Hardware requirements</title>
	<para><application>BAli-Phy</application> should be able to
	run on any hardware with a modern operating system, including
	Linux, 	Windows, and Mac OS X.</para>

	<para>We recommend at least 512Mb of RAM and a 1.5GHz
	processor.  We typically run
	<application>BAli-Phy</application> on Pentium 4 processors
	with 1Gb of RAM and a 3 GHz processor.</para> 


      </sect3>

      <sect3>
	<title>Operating system requirements</title>

	<sect4>
	  <title>Linux</title>

	  <para>A standard Linux system should be able to install and
	  run <application>BAli-Phy</application> without any modification.</para>
	</sect4>

	<sect4>
	  <title>Windows</title>

	  <para>On Windows you must first install <ulink
	  url="http://www.cygwin.com">cygwin</ulink>.  Cygwin is a
	  Linux environment for Windows, and includes GCC, GNU make,
	  and other software.</para> 

	  <para>You can access the Cygwin command line (not the normal
	  windows command line) through the Start menu.</para>
	</sect4>

	<sect4>
	  <title>Mac OS X</title>

	  <para>You should probably have Mac OS version 10.4 (Tiger)
         or higher.  You might be able to compiler on version 10.1 or
         later if you install a recent version of gcc instead of using
         the gcc shipped by Apple.</para>

	  <para>On Mac OS X you must first install <ulink
	  url="http://fink.sourceforge.net">fink</ulink>.  Fink
	  provides Linux software for Mac OS X, and includes GCC,
	  GNU make, and other packages.</para>

	  <para>You can access the command line on OS X by running the
	  Terminal application.</para>
	</sect4>

      </sect3>

      <sect3>
	<title>Software requirements</title>

	<para>Requirements for compiling BAli-Phy are the following software packages: 

	<itemizedlist>
	  <listitem><para> A modern C++ compiler (<ulink url="http://gcc.gnu.org">GCC</ulink> version 3.4 and 4.0 are known to work)</para></listitem>
	  <listitem><para> The GNU Scientific Library (<ulink url="http://sources.redhat.com/gsl/">GSL</ulink>)</para></listitem>
	  <listitem><para> The BOOST C++ Library (<ulink
	  url="http://www.boost.org">BOOST</ulink>) version 1.32 or higher.</para></listitem>
	</itemizedlist>
	</para>
      </sect3>


    </sect2>

    <sect2>
      <title>Compilation</title>

            <para>In order to compile the program on UNIX, simply enter the
	    <filename>src/</filename> directory and type <userinput>make
	    install</userinput> at the shell prompt. This will compile
	    <command>bali-phy</command> and its associated tools, and them
	    to the directory <filename>../build/bin</filename>. </para>

            <para>The makefile provided requires GNU
            <command>make</command>.  When compiling, the default C 
            and C++ compilers are assumed.  If you have multiple
            compilers installed on your system (for example,
            <command>gcc-3.3</command> and
            <command>gcc-4.0</command>), you should set the
            environment variables CC and CXX to the correct compiler
            when compiling <application>BAli-Phy</application>: 
	    <screen><prompt>%</prompt> <userinput>CC=gcc-4.0 CXX=g++-4.0 ARCH=pentium4 make install</userinput></screen>
            To change this, or to change other compilation options,
            edit the makefile <filename>src/GNUmakefile</filename>.</para> 

	    <para>On Intel computers, to generate a faster executable you can add
	    <userinput>ARCH=pentium4</userinput> or
	    <userinput>ARCH=athlon-xp</userinput> to the beginning of the
	    command line as follows:
	    <screen><prompt>%</prompt> <userinput>ARCH=pentium4 make install</userinput>
	    </screen>
	    You can also add <userinput>STATIC=y</userinput> in order
	    to build a static executable.</para> 
    </sect2>

    <sect2>
      <title>Installing the executables</title>
      <para>In order to use <command>bali-phy</command> and the tools
      that you have just compiled, you must copy them into a directory
      in your path.  We recommend copying all tools in
      <filename>build/bin/</filename> into the directory
      <filename>~/bin/</filename> and adding this directory to your
      path. </para>

      <para>In addition, it is recommended that 
      you make a <filename>~/bin/bali-phy/</filename> directory, and
      copy the bali-phy executable to the
      <filename>~/bin/bali-phy/<replaceable>version</replaceable>-NDEBUG</filename>.
      This will allow the ./bin/sampler.sh script to find your
      executable for use with the SGE (Sun Grid Engine) environment. 
      </para>
    </sect2>

  </sect1>

  <sect1>
    <title>Running the program</title>

    <para>The simplest way to run <application>BAli-PHy</application> is
    to invoke the <command>bali-phy</command> executable directly:


<screen><prompt>%</prompt> <userinput>./bali-phy <replaceable>sequence-file</replaceable> &gt;out 2&gt;err</userinput>
</screen>
    Here <replaceable>sequence-file</replaceable> is a FASTA or PHYLIP
    file containing the sequences you wish to analyze.
    </para>

    <para>The <emphasis>recommended</emphasis> way to run the program
    is to copy the <filename>bali-phy</filename> executable to
    <filename>~/bin/bali-phy/<replaceable>version</replaceable>-NDEBUG</filename>
    and run (in a bourne-shell)
    
<screen><prompt>%</prompt> <userinput>VERSION=<replaceable>version</replaceable> CLASS=<replaceable>class</replaceable> sampler.sh <replaceable>sequence-file</replaceable></userinput>
</screen>
    </para>  

    <para>The wrapper script <command>sampler.sh</command>
    will run <command>bali-phy</command> for you.  It will also create a
    unique directory for each invocation of the program, and put
    output files in this directory. The directories will be named
    <replaceable>class</replaceable>-1, <replaceable>class</replaceable>-2,
    etc.</para> 

    <note>
      <para>In many cases it is necessary to specify the location of the data
      directory in order to run the program. The data directory defaults to
      <filename>./Data</filename> if not explicitly set. (See option
      <userinput>--data-dir</userinput>).</para> 
    </note>

  </sect1>
  
  <sect1>
    <title>Command-line options</title>

    <sect2>
      <title>Usage</title>

      <para>The syntax for the program is:</para>

      <cmdsynopsis>
	<command>bali-phy</command>
	<arg choice='req'><replaceable>sequence-file</replaceable></arg>
	<arg>OPTIONS</arg>
      </cmdsynopsis>

      <para>The sequence file is the only required argument.  It can
      be either a FASTA (*.fasta) file or a PHYLIP (*.phy) file.  The
      file must end in one of these two suffixes or
      <application>BAli-PHy</application> won't know how to read
      it. In addition your FASTA files should not contain any blank
      lines.</para> 

      <para>The optional arguments are described below.</para>
	
    </sect2>

    <sect2>
      <title>General options</title>
      
      <variablelist>

	<varlistentry>
	  <term><option>--help</option></term>
	  <listitem><para>produce help message</para></listitem>
	</varlistentry>


	<varlistentry>
	  <term><option>--version</option></term>
	  <listitem><para>print version information</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--show-only</option></term>
	  <listitem><para>analyze the initial values and exit</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--data-dir <replaceable>directory</replaceable></option></term>
	  <listitem><para>data directory</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--align-constraint <replaceable>constraint-file</replaceable></option></term>
	  <listitem><para>specify file with alignment constraints</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--with-stop</option></term>
	  <listitem><para>include stop codons in amino-acid alphabets</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--internal <replaceable>arg</replaceable></option></term>
	  <listitem><para>if set to '+', then make all internal node entries wildcards</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--gaps <replaceable>arg</replaceable></option></term>
	  <listitem><para>if set to 'star', then don't use indel information</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--letters <replaceable>arg</replaceable></option></term>
	  <listitem><para>if set to 'star', then use a star tree for substitution</para></listitem>
	</varlistentry>


      </variablelist>
    </sect2>

    <sect2>
      <title>MCMC options</title>

      <variablelist>
	<varlistentry>
	  <term><option>--iterations <replaceable>number=100000</replaceable></option></term>
	  <listitem><para>the number of iterations to run</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--subsample <replaceable>factor=1</replaceable></option></term>
	  <listitem><para>factor by which to subsample</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--T <replaceable>temperature=1</replaceable></option></term>
	  <listitem><para>MCMCMCMC temperature.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--enable <replaceable>move</replaceable></option></term>
	  <listitem><para>comma-separated list of kernels to enable.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--disable <replaceable>move</replaceable></option></term>
	  <listitem><para>comma-separated list of kernels to disable.</para></listitem>
	</varlistentry>

      </variablelist>
    </sect2>


    <sect2>
      <title>Parameter options</title>
      <variablelist>
	<varlistentry>
	  <term><option>--randomize-alignment</option></term>
	  <listitem><para>randomly re-align sequences before use.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--tree <replaceable>treefile</replaceable></option></term>
	  <listitem><para>file with initial tree</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--set <replaceable>parameter=value</replaceable></option></term>
	  <listitem><para>specify initial parameter value.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--fix <replaceable>parameter[=value]</replaceable></option></term>
	  <listitem><para>mark parameter fixed, and optionally specify value.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--unfix <replaceable>parameter[=value]</replaceable></option></term>
	  <listitem><para>mark parameter unfixed, and optionally specify value.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--frequencies <replaceable>frequencies</replaceable></option></term>
	  <listitem><para>initial frequencies: 'uniform','nucleotides', or a comma-separated list of frequencies.</para></listitem>
	</varlistentry>

      </variablelist>

    </sect2>

    <sect2>
      <title>Model options</title>

      <variablelist>
	<varlistentry>
	  <term><option>--alphabet <replaceable>alphabet</replaceable></option></term>
	  <listitem><para>specify the alphabet: DNA, RNA, Amino Acids, Triplets, or Codons.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--smodel <replaceable>substitution-model</replaceable></option></term>
	  <listitem><para>specify the substitution model</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--imodel <replaceable>indel-model</replaceable></option></term>
	  <listitem><para>specify the indel model</para></listitem>
	</varlistentry>

      </variablelist>

    </sect2>


  </sect1>

  <sect1>
    <title>Examples</title>
    <para>Here are some examples which demonstrate how to run <application>BAli-PHy</application>:</para>

    <example>
      <title>No frills</title>
      <para>Here we analyze the EF-Tu 5-taxon data set provided with
      the software.  The alignment is randomized before the chain begins.</para>
      <screen> <prompt>%</prompt> <userinput>bali-phy Data/EF-Tu/5d.fasta --randomize_alignment &gt;out 2&gt;err</userinput></screen>
    </example>

    <example>
      <title>Multiple-Rate Substitution Model</title>
      <para>We now modify the previous example by changing the
      substitution model to allow gamma-distributed rate variation and
      invariant sites.  The amount of rate variation and the fraction of
      invariant sites are estimated</para>
      
      <screen> <prompt>%</prompt> <userinput>bali-phy Data/EF-Tu/5d.fasta --smodel gamma+INV --randomize-alignment &gt;out 2&gt;err</userinput></screen></example>

    <example>
      <title>Fixed alignment</title>
      <para>Here we use the 5S rRNA 5-taxon data set provided with
      the software.  The alignment is fixed and the traditional
      likelihood model is used, making indels non-informative.  In
      addition, the transition kernel which samples nucleotide frequencies
      is disabled, fixing the nucleotide frequencies to empirical values
      estimated from the input sequences.
      </para> 

      <screen> <prompt>%</prompt> <userinput>bali-phy Data/5S-rRNA/5d.fasta ---disable frequencies --gaps star &gt;out 2&gt;err</userinput></screen>

    </example>
  </sect1>

  <sect1>
    <title>Input</title>

    <sect2>
      <title>Sequence formats</title>
      <para><application>BAli-PHy</application> can read in sequences
      and alignments in both FASTA and PHYLIP formats.  However, in
      FASTA format, the file must not contain blank lines between the
      sequences, because <application>BAli-PHy</application> will stop
      reading in sequences when it seens a blank line.
      </para>
    </sect2>

    <sect2>
      <title>Is my data set too large?</title>

      <para>Large data sets run more slowly than small data
      sets. We recommend a conservative starting point with few taxa
      and short sequence lengths.  You can then increase the size of
      your data set until a balance between speed and size is
      reached.</para> 

      <para>The number of samples that you need depends on whether you
      are primarily interested in obtaining a point estimate or in
      obtaining detailed measures of confidence and uncertainty.  For
      detailed measures of confidence and uncertainty you should
      obtain a minimum of 10,000 samples after the Markov chain
      converges.  For an estimate, you don't need very many samples
      after convergence.  (But you may need many samples to be sure
      that you've converged!)
      </para>

      <sect3>
	<title>Too many taxa?</title>

	<para><application>BAli-PHy</application> is quite CPU
	intensive, and so we recommend using 12 or fewer tax in order
	to limit the time required to accumulate enough MCMC samples.
	We note that many phylogenetic hypotheses can be reduced to
	hypotheses concering only four taxa.  We recommend removing as
	many taxa as possible from your data set.  You can then add
	taxa back into the data set one you have determine how much
	this will increase the duration of the run.</para>

      </sect3>

      <sect3>
	<title>Sequences too long?</title>

	<para>Aligning sequences takes $O(L^2)$ time and RAM, where 
	$L$ represents the sequence length.  Thus, doubling the length
	of the input sequences increases RAM requirements and run
	time by a factor of 4.  Therefore sequence lengths beyond
	750 letters may prove impractical due to limitted RAM or the
	speed of the calculation.   For protein sequences,
	we recommend coding the sequences in terms of amino acids or
	codons, rather than nucleotides.</para>

	<para>However, you might try to see how long you can make your
	sequences before the attempt becomes impractical.</para>
      </sect3>

    </sect2>

  </sect1>

  <sect1>
    <title>Output</title>

    <sect2>
      <title>Output streams</title>

      <para><application>BAli-PHy</application> writes out the sampled
      alignments and other information to the standard output stream, which
      displays on the terminal by default.  Error messages are written to
      the standard error stream, which also displays on the terminal by
      default. In addition some other useful information is written to the
      standard error stream, such as the acceptance fraction for the
      various transition kernels.
      </para>

      <para>You should redirect the standard output to a file called
      <filename>out</filename> and redirect the standard error to a file
      called <filename>err</filename> so that the information on these
      streams is available for later analysis.  In addition, some scripts
      assume that the names <filename>out</filename> and
      <filename>err</filename> are used.  The way to redirect these streams
      to the files is to specify <userinput>&gt;out 2&gt;err</userinput>
      on the command line.</para>
    </sect2>

    <sect2>
      <title>Output files</title>
      <para>When run in a clean directory,
      <application>BAli-PHy</application> produces the following output
      files.  Beside the file <filename>MAP</filename> that contains
      alignments, each line in these files should correspond to one
      iteration.</para>

      
      <variablelist>
	<varlistentry>
	  <term>Pr</term>
	  <listitem>
	    <para>prior, likelihood, probability</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>pI</term>
	  <listitem>
	    <para>indel model parameters</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>pS</term>
	  <listitem>
	    <para>substitution model parameters</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>trees</term>
	  <listitem>
	    <para>tree samples</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>MAP</term>
	  <listitem>
	    <para>successive estimates of the MAP point</para>
	  </listitem>
	</varlistentry>
	
      </variablelist>
      
    </sect2>

    <sect2>
      <title>Analyzing the output</title>
      
      <para>Copy (or link, using <command>ln -s</command>) the file
      <filename>bin/GNUmakefile</filename> into the current
      directory. Then run the command:

      <screen> <prompt>%</prompt> <userinput>SKIP=<replaceable>burn-in</replaceable> make</userinput></screen>

      or

      <screen> <prompt>%</prompt> <userinput>SKIP=<replaceable>burn-in</replaceable> SIZE=<replaceable>iterations</replaceable> make</userinput></screen>

      Here, <replaceable>burn-in</replaceable> represents the
      number of iterations to skip as burn-in, and
      <replaceable>iterations</replaceable> represents the maximum
      number of iterations to use in the analysis. In order for this
      to work, you must have having built the tools in the
      <filename>tools/</filename> directory and have placed them in
      your path.</para>


    </sect2>

    <sect2>

      <title>Results</title>

      <para>Running the above command to analyze the output should produce the following files:</para>
      <variablelist>

	<varlistentry><term>Report</term><listitem><para>A summary of results
    </para></listitem></varlistentry>

	<varlistentry><term>analysis</term><listitem><para>A summary of the data analyzed
    </para></listitem></varlistentry>

	<varlistentry><term>tc</term><listitem><para>Detailed description of posterior support for trees and partitions
    </para></listitem></varlistentry>

	<varlistentry><term>MAP.fasta</term><listitem><para>An estimate of the MAP alignment, w/ taxa sorted by similarity
    </para></listitem></varlistentry>

	<varlistentry><term>MAP.tree</term><listitem><para>An estimate of the MAP tree, in Newick format
    </para></listitem></varlistentry>

	<varlistentry><term>tree.srq</term><listitem><para>A bit-vector of the time-series of the support of the MAP.tree
    </para></listitem></varlistentry>

	<varlistentry><term>tree.plot</term><listitem><para>A summed version of tree.srq. Type <userinput>plot 'tree.plot'</userinput> in <application>gnuplot</application>.
    </para></listitem></varlistentry>

      </variablelist>

      <para>In addition, if you type <userinput>SKIP=<replaceable>burn-in</replaceable> make
   MAP-AU.html</userinput>, the following files will be produced:</para>

      <variablelist>

	<varlistentry><term>MAP-AU.html</term><listitem><para>An AU plot
    </para></listitem></varlistentry>

	<varlistentry><term>MAP-AU.prob</term><listitem><para>The probabilities for each letter in the AU plot
    </para></listitem></varlistentry>

      </variablelist>

    </sect2>

  </sect1>


  <sect1>
    <title>Models</title>

    <sect2>
      <title>Substitution models</title>
      <para>All of <application>BAli-PHy</application>'s substitution
      models are mixtures of continuous-time Markov chains (CTMC).
      These mixtures can consist of the same CTMC model run at a
      mixture of rates (e.g. a gamma rate model) or parameters (e.g. a
      Yang M2 model), or even a mixture of different models.
      </para>

      <sect3>
	<title>Default substitution models</title>
	<para>If the substitution model is not specified, then the
	default model for the alphabet is used.  For DNA or RNA, the
	default model is HKY.  For Codons, the default model is
	YangM0.  For AminoAcids, the default model is Empirical[WAG].
	</para>
      </sect3>

      <sect3>
	<title>Specifying a substitution model</title>

	<para>Substitution models are specified using a stack, as
	follows:
<userinput>Model[arg]+Model[arg]+...+Model[arg]</userinput>
        where each model uses the previous models as input.  Arguments
	are optional.
	</para>

      <para>The basic CTMC models are EQU, HKY, TN, Empirical, and YangM0.</para>

      <para>Model modifiers are gamma, INV, YangM2, YangM3, and YangM7.</para>
      </sect3>


      <sect3>
	<title>Examples</title>
	<para>Example: --smodel EQU  --alphabet Triplets</para>
	<para>Example: --smodel HKY</para>
	<para>Example: --smodel Empirical[WAG]+gamma+INV</para>
	<para>Example: --smodel YangM0 --alphabet Codons</para>
	<para>Example: --smodel YangM2 --alphabet Codons</para>
	<para>Example: --smodel YangM0[TN]+YangM2 --alphabet Codons</para>


      </sect3>

      <sect3>
	<title>Extended model descriptions</title>

	<para>All basic CTMC models are reversible, and can be
	characterized by rates \[Q_{ij} =
	S_{ij}\times\frac{\pi_j^f}{\pi_i^{1-f}},\] where $S$ is a symmetric
	matrix and $\pi$ denotes the equilibrium frequencies for the
	Markov chain.  The transition matrix for a time $t$ is then
	given by \[P(t)_{ij}=e^{Q_{ij} \times t},\] using a matrix exponential.</para>  

      <variablelist>
	<varlistentry>
	  <term>EQU</term>
	  <listitem>
	    <para>$S_{ij} = 1$ for every $i$ and $j$.</para>
	    <para>Alphabet: any.</para>
	    <para>Parameters: none.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>HKY</term>
	  <listitem>
	    <para>The Hasegawa, Kishina, Yano (1985) model.</para>
	    <para>Alphabet: DNA or RNA.</para>
	    <para>Parameters: $\kappa$, the transition/transversion ratio.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>TN</term>
	  <listitem>
	    <para>The Tamura, Nei (1993) model.</para>
	    <para>Alphabet: DNA or RNA.</para>
	    <para>Parameters: $\kappa_1$, the transition/transversion ratio for purines. $\kappa_2$, the transition/transition ratio for pyrimadines.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Empirical[WAG]</term>
	  <listitem>
	    <para>The Whelan and Goldman (2001) model.</para>
	    <para>Alphabet: Amino Acids</para>
	    <para>Parameters: none.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>YangM0</term>
	  <listitem>
	    <para>The Nielsen and Yang (1998) model.</para>
	    <para>Alphabet: Codons.</para>
	    <para>Parameters(2): $\kappa$, the transition/transversion
	    ratio. $\omega$, the non-synonymous/synonymous substitution
	    ratio.</para>

	    <para>One can also specify
	    YangM0[<replaceable>submodel</replaceable>].  In this
	    case, YangM0[HKY] gives the standard Yang M0 model,
	    whereas YangM0[TN] gives two transition/transversion rates.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>YangM2</term>
	  <listitem>
	    <para>The ?? model.</para>
	    <para>Alphabet: Codons.</para>

	    <para>Parameters(5): $\kappa$, the transition/transversion
	    ratio. $p_1, p_2, p_3$, the frequency of three
	    sub-models.  The models have $\omega$ set to $0$, $1$, and
	    $\omega_2$, the non-synonymous/synonymous substitution
	    ratio.</para>

	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>YangM3[$n$]</term>
	  <listitem>
	    <para>The ?? model.</para>
	    <para>Alphabet: Codons.</para>

	    <para>Parameters($2n$): $\kappa$, the transition/transversion
	    ratio. $p_1, \ldots , p_n$, the frequency of
	    $n$. $\omega_1, \ldots , \omega_n$, the
	    non-synonymous/synonymous substitution ratio for the $n$
	    submodels. </para>

	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>YangM7[$n$]</term>
	  <listitem>
	    <para>The ?? model.</para>
	    <para>Alphabet: Codons.</para>

	    <para>Parameters(2): $\mu$, the mean of the Beta
	    distribution.  $\sigma/\mu$, the noise to signal ratio for
	    the Beta distribution.  $n$ is the number of bin for
	    discretizing the Beta distribution.</para>

	  </listitem>
	</varlistentry>

      </variablelist>

      </sect3>
    </sect2>

    <sect2>
      <title>Indel models</title>
      <para>The current models are simple, fragments, and fragments+T</para>
    </sect2>

    <sect2>
      <title>Alignment constraints</title>
      <para>To pin columns of the alignment, specify alignment
      constraints in a file as follows: </para>

      <orderedlist inheritnum="ignore" continuation="restarts">
	<listitem><para>Use the argument
	<userinput>--align-constraint <replaceable>filename</replaceable></userinput></para></listitem> 

	<listitem><para>The filename refers to a file in which each
	line represents a constraint.</para></listitem> 

      </orderedlist>

      <para>The first line of the file is a header consisting of an
   ordered list of sequence names separated by spaces. Each subsequent line
   consists of a space-separated list of sequence positions, with the first position
   corresponding to the first leaf sequence, the second position
   corresponding to the second leaf sequence, etc. Thus, if there are
   &lt;n&gt; leaf taxa, then each line corresponds to a
   space-separated list of &lt;n&gt; integers.</para>

      <para>For example, the line</para>

      <programlisting format="linespecific">1 2 2</programlisting>

      <para>means that position 1 of leaf sequence 1 is aligned to
      position 2 of leaf sequences 2 and 3. Note that the first
      position in a sequence is position 0.</para> 

      <para>Optionally, one may use a '-' instead of an integer, which
      denotes a lack of constraint for that sequence. This can be
      useful as follows:</para> 

<programlisting format="linespecific">2 2 - - 
- - 2 2
</programlisting>

      <para>The above constraints force alignment between position 2
   of sequences 1 and 2, and between position 2 of sequence 3 and
   4.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Auxilliary tools</title>

    <sect2>
      <title>tree-dist-compare</title>
      <para>Usage: tree-dist-compare <replaceable>file1</replaceable>
      <replaceable>file2</replaceable> ... [OPTIONS] </para>
      <para>This program analyzes one or more files each containing a
      list of trees.  It reports the MAP topology, the majority
      consensus topology, and which bi-partitions are supported by the
      data. 
      </para> 
    </sect2>

  </sect1>

</article>
