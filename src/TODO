-8. tree-dist-compare
  a) implement block bootstrap with random block sizes!
  b) add "--size" argument 

-7. Benchmarking of mixing... 
  a) try with alignment fixed
  b) look at log autocorrelation and effective sample sizes for distances
     between 2 nodes + sum all branches + sum all paths
  c) compare mixing with few taxa, many taxa...

-6. Check speedup for blocked DP matrix calculations
  a) How would this work for DP array calculations (1-d) ?

-5. Speeding up GQ_exit( )
  a) can we avoid copying G into G2 - can we construct it in place?
  b) if we put the check into #ifndef NDEBUG, does this gain us anything?
  c) algorithm currently does more or less S*S*(S+NS) multiply-and-add's.

-4) Implement choose_MH( )

-3. Think more carefully about using walk_tree_path
    when changing the topology...

-2. Test various ways of improving mixing
  a) more branch length proposals
  b) branch length proposals in more passes? (how does this affect timing?)
  c) propose scaling the entire tree
  d) propose branch lengths on the log scale...
  e) increase the number of SPR moves
  f) look for papers - by largett's student - on tree mixing
    i) swofford, largett, huelsenbeck - ?
  g) 

-1. Find a way to allow substitution models to propose a lot of different
    changes each time we try to propose new parameters.
    a) ask the model for a number of fiddles to do, and then do
       for(int i=0;i<n_fiddles;i++) {
	 model2 = smodel
         rho = model2->fiddle(i)
         accept/reject(model,model2,rho)
       }

------
0. Plot #topologies in confidence interval (0,p) vs p. (e.g. sort topologies)
    Then plot this versus time...

    Also compare this between runs...

    Figure out burnin for bacteria data sets...

1. Reduce memory usage:
 b) use FastLSA algorithm to change memory usage to O(N+M)*k instead of O(N*M)

2. Try with STLport, mudflap, valgrind, etc.
  a) STLport could actually give us a speedup!

2.5. Make a better framework for reporting acceptance rates.
  a) pass an object to each move to record stats.
  b) each move records stats under a name that it passes.

3. Indel model - fix so that prior probabilities exist!
    a) for now, we condition on leaf sequence lengths.

4. Start making some "nice" pictures to put up on the website.
    a) include pictures to give to Dr. Lake's lab.
    b) include pictures to give to Dr. Sabatti.

5. MCMCMC
    a) Make the temperature affect only the likelihood...
    b) test speedups...
    c) begin to implement the forking code / temperature identifier.
    d) begin to implement the separate random number generators.

6. Make a more general substitution::Model class, so that we can e.g.
    have trees with 2 sets of branch lengths...

7. Write alignment-consensus
  a) if (l>2/3) then the INTERSECTION OF TWO Ml events cannot be contradicted
     by an Ml event.  
     How about level of l required for n Ml events to
      a) intersect?
      b) have their intersection not be contradicted by another Ml event?


8. Add partitions from M[0.5] to M[l] if they are revealed by deleting subtrees.
   a) also mark "badly-rooted" subtrees?  (edges are hidden because of badly-rooted-ness?)

9: Allow specifying another model than HKY (e.g. TNY) 
      underneath YangCodonModel.  
	* This is difficult because the models have different alphabets
	* Suppose we wanted HKY+YangM0+TNY+YangM0+Dual

10: If we are only changing bin frequencies in the smodel, we shouldn't have
    to recalculate all the conditional likelihoods.  How to implement this?
    Some kind of fiddle_safe() routine?

11. Improve mixing for multi_freq model by sampling between columns.
    a) well, firstly, why does convergence take SOO long?
    b) if we could easily just change bin probabilities, then that would
       make it easier to attack this problem by increasing the number
       of MH steps we do.


------
A. sub-partitions: 

*B. How to make priors specified on command line?

C. Debugging framework 
   a) platforms
     1) intel c++
     2) cygwin
     3) MS Visual C++
  b) stlport
  c) compare
     1) MrBayes
     2) bambe
     3) BEAST
  d) mudflap -> alter GNUmakefile so that this is easy

*D. Make alignment-draw be able to output EPS

E. how does P(data|model) depend on number of frequency bins?

F. Allow alignment to contain only 2 sequences?

G. Find a better distance measure for alignment-median?

*H. implement: new framework for fixing things
	a) disable=alignment  -> fixed=A fixed=alignment
	b) disable=alignment_branch -> fixed=A- fixed=leaves-alignment
	c) disable=tree             -> fixed=tau fixed=topology
	d) disable=frequencies      -> fixed=pi  fixed=frequencies

------------------------------



I. fix: gamma+frequency+INV

II. model: Make INV categories depend on letters, somehow...

III. sample lengths/topologies MORE often when alignment sampling also?

IV. A new ggobi is available!  Try multidimensional scaling...

V. Start proposing INV::p on the log odds scale. It is OK to change
the prior, because we never want to use it  differently.


------------------------------------------------------------------------------
[FIXED] s-parameters aren't accepted/sampled often enough.

[FIXED] implement: 'f' parameter in ReversibleMarkov models

[FIXED] check: memory usage -> EF-Tu/12d ~ 120 Mb RAM ?
        (memory usage decreased)

[DONE]  make a separate DEBUG_CACHING

[DONE]  make change_parameters() debugging code call a function which output
        substitution parameters.

[DONE]  allow comments in the alignment constraint file, and make
        the alignment index program spit out the actual letters for each
        column as comments. 

[DONE]  Make tree-dist-compare consider all partitions w/ PP > 0.5

[DONE]  Stop using PHYLIP.  Dealing with truncated names is too painful!

[DONE]  alignment-gild: use list<alignment> instead of vector<>...

[DONE]  alignment-draw: implement bg-colors=type, bg-whiteness = uncertainty

[DONE]  Use boost::program_options and remove arguments.{H,C}

[DONE]  Estimate best alignment by finding the alignment with the greatest
   sum of PP(i ~ j) for all aligned pairs (i,j);

[DONE]  Fix "showonly" - think of better name. (urgh - picked show-only)

[DONE]  Fix setting of 'fixed' flags in model.H/C, to allow 'unfixing' parameters
        and also modifying fixed/unfixed for sub-models.

[DONE]  Fix smodel parameters aren't being sampled.

[DONE]  Make A3-stripped.fasta work with alphabet=Codons

[DONE]  Implement YangM2

[DONE]  Stop requiring --random-tree-ok


[DONE]  Implement sorting of subA columns to provide stable names when columns are re-ordered.
[DONE]  Remove invalidation in 3way sampling, 5way sampling, and tri-sampling.

[DONE]  tree-dist-compare: 
	a) by default, only show 1 topology per file
	b) allow consensus to take a comma-separated list of values

[DONE] add '--first' and '--last' arguments to alignment-find

[DONE] Update tools to use boost::program_options.

[DONE] Fix tools/analyze-distances: make an interface to get likelihoods by column...

[DONE] Record when each constraint is first satisfied, and when all are satisfied
[DONE] Make align-constraint= work SPR_and_A

[DONE] Get intel compiler

[DONE] alignment-draw: put all colormaps on the same scale by making colormaps
       nested and colorschemes not nested.

[DONE] alignment-draw: allow names like --color-scheme=AA+contrast+whiten --scale LOD

[DONE] Allow name[arg] formath in smodel description -> Empirical[wag] + gamma[4]

[DONE] Make alignment-draw simply use 'plain' if AU-file not specified.

[DONE] Better multi_freq model.  
    * frequency will be the frequency of the sub-model.
    * sum_l a(m,l) = 1
    * distribution(m) = sum_; a(m,l)*f(l)
    * f(m,l) = a(m,l) * f(l) / distribution(m)
    * two moves:
      - fiddle frequencies (as normal)
      - fiddle each row (one letter, all models)
    * prior -> each row is dirichlet

[DONE] 	Integrating joint-A-T and the 'hack' to set indel prior parameters.

        
[DONE] Report constraints satisfied by initial alignment/tree.

[DONE] Don't report constraints satisfied if there aren't any.

[DONE] Change DualModel to MixtureModel[n]
        a) make a way of specifying the priors

[DONE] Fix gamma model so that we can put MultiModels underneath it w/o crashing!

[DONE] Convert probabilities to efloat_t in substitution, model priors, etc.

[DONE] Make standardized checks for indexing problems in sample-node / sample-two-nodes.

[DONE] Rename YangCodonModel to YangM0

[DONE] Using regular FP math for DP, with a scaling factor per cell.
       * move created of std::vector< > temporary variables out of loops.
       * switched to using std::valarray< > instead of std::vector< > 
         for state_{array,matrix}
       * inlined di,dj,dk,dl,dc in 3way.H from 3way.C
       * stopped copying a whole bunch of state_{array,matrix}'s around
       * move initialization of s12_sub(,) to forward_cell( ).

[DONE] DPmatrix speedup - phase 2
       * add a boundary, and shift everything by (+1,+1)
       i then we can remove check to optionally break out of the inner loop
       * side effect is that we initialize as we go, even states whose predecessor
         is out of the square.
       * initialize boundaries in forward_square, with special case for (1,1)=S(0,0)
       * special case sample_path() for DPmatrixConstrained( ) because we don't initialize
         illegeal state / location pairs.
      ii REMOVE THE FULL INITIALIZATION in DPmatrix::DPmatrix( )!

       Also:
       * shift s1_sub, s2_sub, s12_sub to matrix coordinates by adding padding to the beginning.

[DONE] Fix sub-alignment indices
  a) make A?::construct reconstruct subA indices
     - indices are uniquely defined - reconstructing from scratch
       should not change them.
     - indices are dependant only on leaf-taxa alignment & tree
  b) reconstruct subA indices when tree changes 
     - sample-tri.C for sample-topology-SPR.C

[DONE] Don't store more that 1 DPmatrix at a time - free memory afterwards unless debugging.

[DONE] Add asymmetric MH proposal capability.

[DONE] Convert all densities to use log_double_t for *_pdf().

[DONE] Implement asymmetric proposals for sample_*_multi( );

  b) implement checking when using this routine

