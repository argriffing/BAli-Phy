-32. alignment-cat A.fasta B.fasta C.fasta > D.fasta
     alignment-cut 1-3 5-10 < A.fasta > B.fasta

     This would allow us to trim the ends of alignments, when the sequences
     start varying a lot, so that we can run enolase. 

-31. Read Schmidler papers + others from postdoc e-mail.

-30. Read Seo paper + others

-29. Type in ideas from conference.

-28. Determine criteria for 1.9.8

-27. trees-consensus: report number of branches observed 
     a) how should we interpret this number, though?
     b) how should we GET the number?

-18. Compare estimates w/ MrBayes on the globin example.
     Compare estimates w/ MrBayes on the EF-Tu 48b example.
     a) compare mixing, topologies, branch lengths, speed, etc.

-17. a. Implement letter classes.
	a.1)  Should a wildcard be a special class, or not??
     b. Remove '*' altogether - use a 'stop' character?
     c. Allow reading Codon alphabet w/ individual letter wildcards.
        (But return them all as alphabet::not_gap)
     d. Handle letter classes in parsimony analysis.
        (split out into parsimony.C).
     e. Allow codon classes in other places.
     f. Check!

-25. Consider calculating PP of all the trees in alignment-consensus...
     a) don't keep on RE-calculating everything.
        i) calculate support bitvector for 100%
       ii) then calculate support bitvector for each new partition that is added,
          and bitwise AND it in.

     a) Consider sorting the partitions to improve speed.

        But - would this work with SUB-partitions?

     b) Perhaps first try to shrink the SIZE of trees, so that we can
        store trees, to improve speed.

        Would THIS work with sub-partitions? (YES) [check when awake!]

-11. Make a program to compare two alignment distributions.
     a) Flag homology pairs that have abs(log(p1,p2)) > thresh-hold. 
     b) Output the pairs of residues that act up.
       b.1) Have a method to convert the pairs to a color scheme.
       b.2) Invent a color scheme that is something like 'grey' (1) +
            red (0). 
     c) Allow the user to specify either a sequence of alignment
        samples or an alignment w/ '?' characters, and a level of
        certainty at which to consider each pair in that alignment.
 
-24. Allow alignment-gild to annotate an alignment-consensus

-22. Don't show SRQ or sum plots for partitions w/ less than <N=10> regenerations,
     if the actual number of regenerations falls in a 95% confidence interval given
     the PP.
     a) Develop an idea of how to do a statistical test based on SRQ plots...

-21. Make trees-bootstrap.C print trees instead of collections of full partitions.

-15. Sub-class DPengine w/ transition matrix implemented as
  i) Matrix  (as now)
 ii) const Matrix&  - avoid some malloc,copy,dealloc
iii) computed Matrix - 
     a) return 0 quickly if zero
     b) compute non-zeros (
We can avoid TWO malloc/copy/dealloc.
(But we would still have to compute GQ...) ?

-14. ADD partitions to M[0.5] that imply l=0.5 sub-partitions.

-12. Make a hash function for sub-partitions that is 
     (hash(left mask) * hash(right mask)), where the hash() function
     is a hash function for bitmasks and involves addition, not
     multiplication. 

-10. Make tree a virtual public base class for SequenceTree and RootedTree?

-9.  tree-dist.C: 

	1. For each topology, store full partitions as vector<int> of
           subscripts into partition list.

	2. For each partition, store list of topologies that imply it.

	How much memory would we save?

	Can we speed up 'implies(Tree,Partition)' if we have topology
	   information, such as 'which branches are my neighbors'?

	Can we quickly determine support for SUB-partitions?

-8. Sanitize use of MAP_tree in tree-dist-compare when the count is 1.   
    Report a median when there are a number of trees w/ the same count?

-7. Benchmarking of mixing... 
  a) try with alignment fixed
  b) look at log autocorrelation and effective sample sizes for distances
     between 2 nodes + sum all branches + sum all paths
  c) compare mixing with few taxa, many taxa...
  d) handle alignment predicates in the SRQ plot.
     can we output residues which are mixing badly?

-5. Speeding up GQ_exit( )
  a) can we avoid copying G into G2 - can we construct it in place?
  b) if we put the check into #ifndef NDEBUG, does this gain us anything?
  c) algorithm currently does more or less S*S*(S+NS) multiply-and-add's.
  d) it also takes time to compute the silent state topology.  Can we cache this?

-4. Actually do the MCMCMC T thingy - how much slowdown does this give?

-3. Think more carefully about using walk_tree_path
    when changing the topology...

-2. Test various ways of improving mixing
  a) more branch length proposals
  b) branch length proposals in more passes? (how does this affect timing?)
  c) propose scaling the entire tree
  d) propose branch lengths on the log scale...
  e) increase the number of SPR moves
  f) look for papers - by largett's student - on tree mixing
    i) swofford, largett, huelsenbeck - ?
  g) 

-1. Find a way to allow substitution models to propose a lot of different
    changes each time we try to propose new parameters.
    a) ask the model for a number of fiddles to do, and then do
       for(int i=0;i<n_fiddles;i++) {
	 model2 = smodel
         rho = model2->fiddle(i)
         accept/reject(model,model2,rho)
       }

------
0. Plot #topologies in confidence interval (0,p) vs p. (e.g. sort topologies)
    Then plot this versus time...

    Also compare this between runs...

    Figure out burnin for bacteria data sets...

1. Reduce memory usage:
 b) use FastLSA algorithm to change memory usage to O(N+M)*k instead of O(N*M)

2. Try with STLport, mudflap, valgrind, etc.
  a) STLport could actually give us a speedup!

2.5. Make a better framework for reporting acceptance rates.
  a) pass an object to each move to record stats.
  b) each move records stats under a name that it passes.

3. Indel model - fix so that prior probabilities exist!
    a) for now, we condition on leaf sequence lengths.

4. Start making some "nice" pictures to put up on the website.
    a) include pictures to give to Dr. Lake's lab.
    b) include pictures to give to Dr. Sabatti.

5. MCMCMC
   ??) Find a way to correctly run heated chains, avoiding:
       0) ?
       i) improper pairwise alignment distribution
      ii) really expensive DP calculations...
    a) Make the temperature affect only the likelihood...
    b) test speedups...
    c) begin to implement the forking code / temperature identifier.
    d) begin to implement the separate random number generators.

6. Make a more general substitution::Model class, so that we can e.g.
    have trees with 2 sets of branch lengths...

8. Add partitions from M[0.5] to M[l] if they are revealed by deleting subtrees.
   a) also mark "badly-rooted" subtrees?  (edges are hidden because of badly-rooted-ness?)

10: If we are only changing bin frequencies in the smodel, we shouldn't have
    to recalculate all the conditional likelihoods.  How to implement this?
    Some kind of fiddle_safe() routine?

11. Improve mixing for multi_freq model by sampling between columns.
    a) well, firstly, why does convergence take SOO long?
    b) if we could easily just change bin probabilities, then that would
       make it easier to attack this problem by increasing the number
       of MH steps we do.


------
A. sub-partitions: 

*B. How to make priors specified on command line?

C. Debugging framework 
   a) platforms
     1) intel c++
     2) cygwin
     3) MS Visual C++
  b) stlport
  c) compare
     1) MrBayes
     2) bambe
     3) BEAST
  d) mudflap -> alter GNUmakefile so that this is easy

*D. Make alignment-draw be able to output EPS

E. how does P(data|model) depend on number of frequency bins?

F. Allow alignment to contain only 2 sequences?

G. Find a better distance measure for alignment-median?

*H. implement: new framework for fixing things
	a) disable=alignment  -> fixed=A fixed=alignment
	b) disable=alignment_branch -> fixed=A- fixed=leaves-alignment
	c) disable=tree             -> fixed=tau fixed=topology
	d) disable=frequencies      -> fixed=pi  fixed=frequencies

------------------------------



I. fix: gamma+frequency+INV

II. model: Make INV categories depend on letters, somehow...

III. sample lengths/topologies MORE often when alignment sampling also?

IV. A new ggobi is available!  Try multidimensional scaling...

V. Start proposing INV::p on the log odds scale. It is OK to change
the prior, because we never want to use it  differently.


------------------------------------------------------------------------------
[FIXED] s-parameters aren't accepted/sampled often enough.

[FIXED] implement: 'f' parameter in ReversibleMarkov models

[FIXED] check: memory usage -> EF-Tu/12d ~ 120 Mb RAM ?
        (memory usage decreased)

[DONE]  make a separate DEBUG_CACHING

[DONE]  make change_parameters() debugging code call a function which outputs
        substitution parameters.

[DONE]  allow comments in the alignment constraint file, and make
        the alignment index program spit out the actual letters for each
        column as comments. 

[DONE]  Make tree-dist-compare consider all partitions w/ PP > 0.5

[DONE]  Stop using PHYLIP.  Dealing with truncated names is too painful!

[DONE]  alignment-gild: use list<alignment> instead of vector<>...

[DONE]  alignment-draw: implement bg-colors=type, bg-whiteness = uncertainty

[DONE]  Use boost::program_options and remove arguments.{H,C}

[DONE]  Estimate best alignment by finding the alignment with the greatest
   sum of PP(i ~ j) for all aligned pairs (i,j);

[DONE]  Fix "showonly" - think of better name. (urgh - picked show-only)

[DONE]  Fix setting of 'fixed' flags in model.H/C, to allow 'unfixing' parameters
        and also modifying fixed/unfixed for sub-models.

[DONE]  Fix smodel parameters aren't being sampled.

[DONE]  Make A3-stripped.fasta work with alphabet=Codons

[DONE]  Implement YangM2

[DONE]  Stop requiring --random-tree-ok


[DONE]  Implement sorting of subA columns to provide stable names when columns are re-ordered.
[DONE]  Remove invalidation in 3way sampling, 5way sampling, and tri-sampling.

[DONE]  tree-dist-compare: 
	a) by default, only show 1 topology per file
	b) allow consensus to take a comma-separated list of values

[DONE] add '--first' and '--last' arguments to alignment-find

[DONE] Update tools to use boost::program_options.

[DONE] Fix tools/analyze-distances: make an interface to get likelihoods by column...

[DONE] Record when each constraint is first satisfied, and when all are satisfied
[DONE] Make align-constraint= work SPR_and_A

[DONE] Get intel compiler

[DONE] alignment-draw: put all colormaps on the same scale by making colormaps
       nested and colorschemes not nested.

[DONE] alignment-draw: allow names like --color-scheme=AA+contrast+whiten --scale LOD

[DONE] Allow name[arg] formath in smodel description -> Empirical[wag] + gamma[4]

[DONE] Make alignment-draw simply use 'plain' if AU-file not specified.

[DONE] Better multi_freq model.  
    * frequency will be the frequency of the sub-model.
    * sum_l a(m,l) = 1
    * distribution(m) = sum_; a(m,l)*f(l)
    * f(m,l) = a(m,l) * f(l) / distribution(m)
    * two moves:
      - fiddle frequencies (as normal)
      - fiddle each row (one letter, all models)
    * prior -> each row is dirichlet

[DONE] 	Integrating joint-A-T and the 'hack' to set indel prior parameters.

        
[DONE] Report constraints satisfied by initial alignment/tree.

[DONE] Don't report constraints satisfied if there aren't any.

[DONE] Change DualModel to MixtureModel[n]
        a) make a way of specifying the priors

[DONE] Fix gamma model so that we can put MultiModels underneath it w/o crashing!

[DONE] Convert probabilities to efloat_t in substitution, model priors, etc.

[DONE] Make standardized checks for indexing problems in sample-node / sample-two-nodes.

[DONE] Rename YangCodonModel to YangM0

[DONE] Using regular FP math for DP, with a scaling factor per cell.
       * move created of std::vector< > temporary variables out of loops.
       * switched to using std::valarray< > instead of std::vector< > 
         for state_{array,matrix}
       * inlined di,dj,dk,dl,dc in 3way.H from 3way.C
       * stopped copying a whole bunch of state_{array,matrix}'s around
       * move initialization of s12_sub(,) to forward_cell( ).

[DONE] DPmatrix speedup - phase 2
       * add a boundary, and shift everything by (+1,+1)
       i then we can remove check to optionally break out of the inner loop
       * side effect is that we initialize as we go, even states whose predecessor
         is out of the square.
       * initialize boundaries in forward_square, with special case for (1,1)=S(0,0)
       * special case sample_path() for DPmatrixConstrained( ) because we don't initialize
         illegeal state / location pairs.
      ii REMOVE THE FULL INITIALIZATION in DPmatrix::DPmatrix( )!

       Also:
       * shift s1_sub, s2_sub, s12_sub to matrix coordinates by adding padding to the beginning.

[DONE] Fix sub-alignment indices
  a) make A?::construct reconstruct subA indices
     - indices are uniquely defined - reconstructing from scratch
       should not change them.
     - indices are dependant only on leaf-taxa alignment & tree
  b) reconstruct subA indices when tree changes 
     - sample-tri.C for sample-topology-SPR.C

[DONE] Don't store more that 1 DPmatrix at a time - free memory afterwards unless debugging.

[DONE] Add asymmetric MH proposal capability.

[DONE] Convert all densities to use log_double_t for *_pdf().

[DONE] Implement asymmetric proposals for sample_*_multi( );

  b) implement checking when using this routine

[DONE] Implement choose_MH( ).

[DONE] Write alignment-consensus.

[DONE] Start fiddling the 'f' parameter, but making it fixed by default.

[DONE] Allow specifying a non-HKY model underneath the Yang M0 model.

[DONE] (a) Estimate branch lengths for multifurcating trees
       (b) Pass the c50 tree w/ lengths to alignment-reorder

[DONE] Given a c50 tree, keep partitions that imply sub-partitions.
       If two partitions imply a sub-partitions, only keep the one
         with the smallest min(count(group1),count(group2))

[DONE] tree_sample cleanup part I.
       * Store leaf-sized bitmasks per branch.
       * Store leaf names once per tree_sample, not per-tree.
       * Reduces 29Mb -> 6Mb (factor of 5 decrease)

[DONE] Call get_Ml_sub_partitions_and_counts only ONCE.
       * pull out combinations of badly rooted branches.
       * pull out (A,B):-X as (-A-X) and (-B-X)
       * cache computed PP for all sub-partitions,
       * find M[l] branches at each level l in the cache

[DONE] Plot the number of supported branches for EVERY level.  
       Then we could branches vs level, which is less sensitive
        than looking at presence or absences at a SINGLE level.

[DONE] Do a better job at finding the minimal number of c50 branches
        that imply a partition.

[DONE] Make a 'Mixing' directory in addition to 'Results' and 'Work'.

[DONE] tree-to-srq: take partitions as input, not just trees.

[DONE] Make a ??? letter for Codon alphabets.

[DONE] Remove '--with-stop', and add new alpabet names "Amino Acids + stop"
       and "Codons + stop"  

[DONE] Print blocksize, seed, and pseudo count on the same line in [ ].

[DONE] Separate tree-dist-compare into two programs: 
        a) trees-consensus estimates MAP and M[l] topologies for a
           single tree sample 
        b) trees-bootstrap bootstraps support for partitions, possibly
           from multiple tree samples.
          i) speed up the trees-bootstrap by using the same samples
             for each predicate, so that we need only generate the
             random numbers once.

[DONE] Print N or X instead of *

[DONE] Stop computing leaf partition sets.
       Only compute+cache partition masks when we need them.

[DONE] Cleanup "unused parameter" and other warnings.

[DONE] trees-bootstrap:
       
     a) make the number of samples in the bootstrap a parameter
     b) use pseudocounts if specified.


*IDEAS*

 - make a SplitsTree-like graph out of a tree sample,
   where the edges mean bi-partitions, and don't use distance
   information but topology information instead. 
   (contact girl from INCOB?)

 - for HIV data, we want samples from DIFFERENT PATIENTS, not
   from the same patient, because recombination is limitted to
   within-patient samples.

   if we can avoid co-infection, then we are good!

   (a) check Shankarrapa samples from the HIV database...
   (b) ? ask Marc about asking people if we can use their data
       or asking questions about their data.

 - find some papers for the journal club?

 - introduce alphabet models - such as codon model frequencies depending
   on [A],[T],[G],and [C].  We allow them to deviate, but put evidence on
   them NOT deviating.

 - consider doing variable amino-acid frequencies in a CODON model!

 - consider modelling functional divergence - Karin's branch problem?

 - for alignment - how do we balance "extra high rate of change on this branch"
   (e.g. different aa on each side ) with "unalign the two sides of this
   branch"?

 - if we can take a <X>% confidence region in tree space, then any strict
   consensus measure of that region would be an level-<X> consensus tree.

 - we could search for the <X>% of the samples that would give the most
   resolved tree.

 - consider a version of pair-HMM with 2x as many states: we would have a 
   "slow" and "fast" version of M,G1,G2 in which indels have different
rates.

-  more complex model: have 'slow' and 'fast' be properties of the
   individual letters in the state.
  