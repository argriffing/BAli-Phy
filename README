*RUNNING THE PROGRAM*

In order to run the program, note that in many cases it is
necessary to specify the location of the data directory.  The data
directory will be "./Data" it not explicitly set. (See "data-dir").

The simplest way to run bali-phy is simply to specify some input
sequences:  

% ./bali-phy <sequence-file> >out 2>err

The RECOMMENDED way to run the program is to copy it to ~/bin/bali-phy/<version>-NDEBUG
and run (in a bourne-shell)

% VERSION=<version> CLASS=<class> sampler.sh <sequence-file>

This will create a unique directory <class>-<num> for each invocation of the program,
and run it inside this directory.



*COMMAND LINE ARGUMENTS*

The "align" argument is the only REQUIRED argument, and can take both
FASTA (*.fasta) and PHYLIP (*.phy) files.  The file must contain one
of these two suffixes or it won't know how to read the file.  In addition
your FASTA file should not any blank lines.

Usage: bali-phy <sequence-file> [OPTIONS]
All options:

General options:
  --help                     : produce help message
  --show-only                : analyze the initial values and exit
  --seed arg                 : random seed
  --data-dir arg (=Data)     : data directory
  --align-constraint arg     : file with alignment constraints
  --with-stop                : include stop codons in amino-acid alphabets
  --internal arg             : if set to '+', then make all internal node entries wildcards
  --gaps arg (=full_tree)    : if set to 'star', then don't use indel information
  --letters arg (=full_tree) : if set to 'star', then use a star tree for substitution

MCMC options:
  --iterations arg (=100000) : the number of iterations to run
  --subsample arg (=1)       : factor by which to subsample
  --T arg (=1)               : MCMCMC temperature
  --enable arg               : comma-separated list of kernels to enable
  --disable arg              : comma-separated list of kernels to disable

Parameter options:
  --align arg            : file with sequences and initial alignment
  --tree arg             : file with initial tree
  --set arg              : set parameter=<value>
  --fix arg              : fix parameter[=<value>]
  --unfix arg            : un-fix parameter
  --randomize-alignment  : randomly realign the sequences before using
  --smodel arg           : substitution model
  --imodel arg (=new)    : indel model

Substitution model options:
  --frequencies arg      : comma-separated vector of frequencies to use as initial condition
  --alphabet arg         : set to 'Codons' to prefer codon alphabets
  --CFNF                 : make codon frequencies from nucleotide frequencies

DETAILS:

 --gaps star         

   Revert to the standard model, w/o gaps.  This turns off MCMC
   transition kernels which assume a gap model.

 --smodel <substitution model>

   The model is follows this pattern: 
	<base model>+modifier+modifier
   For example, an allowable model name is
	Empirical+gamma+INV
   Each term may be left out, but the terms must be separated by '+'
   signs, and must appear in the specified order.

   Some terms take an argument in this fashion
	name[argument]
   For example, you can specify the JTT model as "Empirical[jtt]" and you
   can specify 6 bins for the discrete gamma by writing "gamma[6]"

   The base model is a reversible continuous time Markov chain (CTMC)
   model.  Base models that we have implemented include HKY, EQU,
   YangCodonModel, and empirically estimated reversible models
   such as the WAG model.  See the 'Empirical' parameter to specify
   the transition matrix. 
   
 --alphabet Codons

   This puts codon alphabets on the list of alphabets to try.

 --frequencies <frequencies>

   Frequencies are specified as a comma-separated list of values.
   Note that frequencies that are very near 0 can cause a crash
   in exponentiating the rate matrix.

 --data-dir <dir>

   This is set to "./Data/" by default, and specifies where to look
   for translation tables (for the codon model) and empirical
   transition matrices.

 --letters star

   Uses a star tree for the peeling algorithm.

 --randomize-alignment

   Randomizes the alignment before starting the chain.

 --seed <random seed>

   Specify a seed to the random number generator, so that runs can be
   repeated. 

 --imodel {simple,new}

   Select the indel model.  We used "simple" model in our paper.  The
   "new" model assumes all indels are of unit length.  We can simulate
   a model where all indels are of unit length by forcing epsilon to be
   very small.

 --internal +

   Set each internal sequence to * (a Felsenstein wildcard) in every
   column. 

 --disable <list of transition kernels>
 --enable <list of transition kernels>

   Disables or enables a list of transition kernels.  To find out
   kernel names, look at STDOUT at the beginning of a run.  Moves also
   have attributes by which they can be mentioned.  Try attributes
   such as alignment, alignment_branch, nodes, lengths.  For example,
   enable sampling of gap parameters, include "enable=g_parameters"
   
 --with-stop

   When considering amino acid alphabets, include a "stop" letter.
   This also affects codon models, by not removing stop codons from
   the alphabet.

EXAMPLES:

% bali-phy align=Data/EF-Tu/5d.fasta randomize_alignment >out 2>err

% bali-phy align=Data/EF-Tu/5d.fasta smodel=gamma+INV >out 2>err

% bali-phy align=Data/5S-rRNA/5d.fasta disable=g_parameters gaps=star >out 2>err







THE OUTPUT

When run in a clean directory, bali-phy produces the following output files:
 - Pr    (prior, likelihood, probability)
 - pI    (indel model parameters)
 - pS    (substitution model parameters)
 - trees (tree samples)
 - MAP   (successive estimates of the MAP point)

In addition the standard output and standard error are assumed to be names cout
and cerr.  If not, rename them in order for the following procedure to work.

ANALYZING THE OUTPUT: Procedure

Copy (or link, using ln -s) the file bali-phy-<VERSION>/bin/GNUmakefile into the current directory.  Then run the command 

% SKIP=<burnin iteerations> make

          OR
% SKIP=<burnin iteerations> SIZE=<number of iterations> make

This procedure depends on having builts the tools in the 'tools' directory, and
having the resulting tools in your path.

ANALYZING THE OUTPUT: Results

This should produce the following files:

 - Report    (A summary of results)
 - analysis  (A summary of the data analyzed)
 - tc        (Detailed description of posterior support for trees
              and partitions)
 - MAP.fasta (An estimate of the MAP alignment, w/ taxa sorted by similarity)
 - MAP.phy   (An estimate of the MAP alignment, w/ taxa sorted by similarity)
 - MAP.tree  (An estimate of the MAP tree, in Newick format)
 - tree.srq  (A bit vector of the time-series of the support of the MAP.tree)
 - tree.plot (A summed version of tree.srq.  Type "plot 'tree.plot'" in gnuplot)

In addition, if you type 'SKIP=<burnin> make blame.html', the following files
will be produced:

 - blame.html (An AU plot)
 - blame.prob (the probabilities for each letter in the AU plot)


To pin columns of the alignment, specify alignment constraints in a
file as follows:
  1. Use the argument "align-constraint=[filename]"
  2. The filename refers to a file in which each line represents a constraint.

The first line of the file is a header consisting of an ordered list
of sequence names separated by spaces.  

Each line consists of a list of sequence positions, with the first
position corresponding to the first leaf sequence, the second position
corresponding to the second leaf sequence, etc.  Thus, if there are
<n> leaf taxa, then each line corresponds to a space-separated list of
<n> integers.

For example,

1 2 2

means that position 1 of leaf sequence 1 is aligned to position 2 of
leaf sequences 2 and 3. 

Note that the first position in a sequence is position 0.

Optionally, one may use a '-' instead of an integer, which denotes a
lack of constraint for that sequence.  This can be useful as follows:

1 1 - -
- - 1 1

the above constraint forces alignment between sequences 1&2 and
between sequences 3&4.
