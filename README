Document's Title: BAli-Phy User's Guide

BAli-Phy User's Guide

    Benjamin Redelings

    --------------------------------------------------------------

    Table of Contents

    Running the Program
    Command Line Arguments
         Usage
         General options
         MCMC options
         Parameter options
         Substitution model options
         Alignment Constraints

    Examples
    The Output
         Output Files
         Processing the Output
         Results

    Auxilliary Tools
         tree-dist-compare


  *Running the Program*

    In order to run the program, note that in many cases it is necessary to
    specify the location of the data directory. The data directory will be
    ./Data it not explicitly set. (See option "data-dir").

    The simplest way to run bali-phy is simply to specify some inputsequences:

    % ./bali-phy <sequence-file> >out 2>err

    The recommended way to run the program is to copy it to
    ~/bin/bali-phy/<version>-NDEBUG and run (in a bourne-shell)

    % VERSION=<version> CLASS=<class> sampler.sh <sequence-file>

    The wrapper script sampler.sh will run bali-phy for you. It will also
    create a unique directory for each invocation of the program, and put
    output files in this directory.

  *Command Line Arguments*

    Usage

    The syntax for the program is:

    bali-phy {sequence-file} [OPTIONS]

    The sequence-file can be either a FASTA (*.fasta) file or a PHYLIP
    (*.phy) file and is the only required argument. The file must contain end
    in one of these two suffixes or bali-phy won't know how to read the file.
    In addition your FASTA files should not any blank lines.

    The optional arguments are described below.

    General options

      --help                     : produce help message
      --version                  : print version information
      --show-only                : analyze the initial values and exit
      --seed arg                 : random seed
      --data-dir arg (=Data)     : data directory
      --align-constraint arg     : file with alignment constraints
      --with-stop                : include stop codons in amino-acid alphabets
      --internal arg             : if set to '+', then make all internal node
    entries wildcards
      --gaps arg (=full_tree)    : if set to 'star', then don't use indel
    information
      --letters arg (=full_tree) : if set to 'star', then use a star tree for
    substitution

    MCMC options

      --iterations arg (=100000) : the number of iterations to run
      --subsample arg (=1)       : factor by which to subsample
      --T arg (=1)               : MCMCMC temperature
      --enable arg               : comma-separated list of kernels to enable
      --disable arg              : comma-separated list of kernels to disable

    Parameter options

      --align arg                      : file with sequences and initial
    alignment
      --tree arg                       : file with initial tree
      --set arg                        : set parameter=<value>
      --fix arg                        : fix parameter[=<value>]
      --unfix arg                      : un-fix parameter
      --randomize-alignment            : randomly realign the sequences
    before using
      --smodel arg                     : substitution model
      --imodel arg (=fragment-based+T) : indel model

    Substitution model options

      --frequencies arg      : comma-separated vector of frequencies to use
    as initial condition
      --alphabet arg         : set to 'Codons' to prefer codon alphabets
      --CFNF                 : make codon frequencies from nucleotide
    frequencies

    Alignment Constraints

    To pin columns of the alignment, specify alignment constraints in a file
    as follows:

       1. Use the argument "align-constraint=[filename]"
       2. The filename refers to a file in which each line represents a
          constraint.

    The first line of the file is a header consisting of an ordered list of
    sequence names separated by spaces. Each line consists of a list of
    sequence positions, with the first position corresponding to the first
    leaf sequence, the second position corresponding to the second leaf
    sequence, etc. Thus, if there are <n> leaf taxa, then each line
    corresponds to a space-separated list of <n> integers.

    For example,

    1 2 2

    means that position 1 of leaf sequence 1 is aligned to position 2 of leaf
    sequences 2 and 3 Note that the first position in a sequence is position
    0.

    Optionally, one may use a '-' instead of an integer, which denotes a lack
    of constraint for that sequence. This can be useful as follows:

    2 2 - - 
    - - 2 2

    the above constraint forces alignment between position 2 of sequences 1
    and 2, and between position 2 of sequence 3 and 4.

  *Examples*

    Here are some example invocations of bali-phy:

    This example uses the EF-Tu 5-taxon data set provided with the software.
    The alignment is randomized before the chain begins.

    % bali-phy Data/EF-Tu/5d.fasta --randomize_alignment >out 2>err

    This example modifies the previous example by changing the substitution
    model to allow gamma-distributed rate variation and invariant sites. The
    amount of rate variation and the fraction of invariant sites are estimated

    % bali-phy Data/EF-Tu/5d.fasta --smodel gamma+INV --randomize-alignment >out 2>err

    This example uses the 5S rRNA 5-taxon data set provided with the
    software. The alignment is fixed and the traditional likelihood model is
    used, making indels non-informative. In addition, the transition kernel
    which samples indel model parameters is disabled

    % bali-phy Data/5S-rRNA/5d.fasta ---disable g_parameters --gaps star >out 2>err

  *The Output*

    Output Files

    When run in a clean directory, bali-phy produces the following output
    files:

    Pr
         prior, likelihood, probability
    pI
         indel model parameters
    pS
         substitution model parameters
    trees
         tree samples
    MAP
         successive estimates of the MAP point

    In addition, I will assume that the standard output and standard error
    are sent to files named “out” and “err”. If not, rename them in
    order for the following procedure to work.

    Processing the Output

    Copy (or link, using ln -s) the file bin/GNUmakefile into the current
    directory. Then run the command

    % SKIP=<burnin iteerations> make

    OR

    % SKIP=<burnin iteerations> SIZE=<number of iterations> make

    This procedure depends on having builts the tools in the 'tools'
    directory, and having the resulting tools in your path.

    Results

    The procedure mentioned above should produce the following files:

    Report
         A summary of results
    analysis
         A summary of the data analyzed
    tc
         Detailed description of posterior support for trees and partitions
    MAP.fasta
         An estimate of the MAP alignment, w/ taxa sorted by similarity
    MAP.phy
         An estimate of the MAP alignment, w/ taxa sorted by similarity
    MAP.tree
         An estimate of the MAP tree, in Newick format
    tree.srq
         A bit vector of the time-series of the support of the MAP.tree
    tree.plot
         A summed version of tree.srq. Type "plot 'tree.plot'" in gnuplot

    In addition, if you type SKIP=<burnin> make blame.html, the following
    files will be produced:

    blame.html
         An AU plot
    blame.prob
         the probabilities for each letter in the AU plot

  *Auxilliary Tools*

    tree-dist-compare

    Usage:
